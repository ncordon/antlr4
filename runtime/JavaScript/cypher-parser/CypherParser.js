// Generated from cypher-grammar/CypherParser.g4 by ANTLR 4.13.0
// jshint ignore: start
import antlr4 from 'antlr4';
import CypherParserListener from './CypherParserListener.js';
import CypherParserVisitor from './CypherParserVisitor.js';

const serializedATN = [4,1,99,830,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,1,0,1,0,3,0,181,8,0,1,0,1,0,1,1,1,1,3,
1,187,8,1,1,2,1,2,5,2,191,8,2,10,2,12,2,194,9,2,1,3,1,3,3,3,198,8,3,1,4,
1,4,1,4,3,4,203,8,4,1,4,1,4,1,4,3,4,208,8,4,3,4,210,8,4,1,5,1,5,1,5,1,6,
1,6,1,6,3,6,218,8,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,3,9,227,8,9,1,9,1,9,3,9,
231,8,9,1,9,3,9,234,8,9,1,9,3,9,237,8,9,1,10,1,10,3,10,241,8,10,1,10,1,10,
5,10,245,8,10,10,10,12,10,248,9,10,1,11,1,11,1,11,3,11,253,8,11,1,12,1,12,
3,12,257,8,12,1,13,1,13,1,13,1,13,1,13,5,13,264,8,13,10,13,12,13,267,9,13,
1,14,5,14,270,8,14,10,14,12,14,273,9,14,1,14,1,14,4,14,277,8,14,11,14,12,
14,278,1,14,3,14,282,8,14,3,14,284,8,14,1,15,5,15,287,8,15,10,15,12,15,290,
9,15,1,15,5,15,293,8,15,10,15,12,15,296,9,15,1,15,4,15,299,8,15,11,15,12,
15,300,1,15,1,15,1,16,3,16,306,8,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
17,1,18,1,18,1,18,3,18,319,8,18,1,19,1,19,1,19,1,19,1,19,3,19,326,8,19,1,
20,3,20,329,8,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,338,8,21,10,21,
12,21,341,9,21,1,22,1,22,1,22,1,22,3,22,347,8,22,1,23,1,23,1,23,1,23,1,23,
3,23,354,8,23,1,24,1,24,3,24,358,8,24,1,24,1,24,1,25,1,25,1,25,5,25,365,
8,25,10,25,12,25,368,9,25,1,25,3,25,371,8,25,1,26,1,26,1,26,3,26,376,8,26,
1,26,1,26,1,27,1,27,1,27,5,27,383,8,27,10,27,12,27,386,9,27,1,28,1,28,1,
28,1,28,1,29,1,29,1,29,1,29,5,29,396,8,29,10,29,12,29,399,9,29,1,30,1,30,
1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,412,8,30,1,31,1,31,4,31,
416,8,31,11,31,12,31,417,1,32,1,32,1,32,1,33,1,33,3,33,425,8,33,1,34,1,34,
1,34,1,35,1,35,1,35,5,35,433,8,35,10,35,12,35,436,9,35,1,36,1,36,1,36,5,
36,441,8,36,10,36,12,36,444,9,36,1,37,1,37,1,37,5,37,449,8,37,10,37,12,37,
452,9,37,1,38,1,38,1,38,5,38,457,8,38,10,38,12,38,460,9,38,1,39,3,39,463,
8,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,471,8,40,10,40,12,40,474,9,40,1,
41,1,41,1,42,1,42,1,42,5,42,481,8,42,10,42,12,42,484,9,42,1,43,1,43,1,43,
5,43,489,8,43,10,43,12,43,492,9,43,1,44,1,44,1,44,5,44,497,8,44,10,44,12,
44,500,9,44,1,45,3,45,503,8,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,511,8,
46,10,46,12,46,514,9,46,1,47,1,47,1,47,1,47,3,47,520,8,47,1,47,1,47,3,47,
524,8,47,1,47,3,47,527,8,47,1,47,3,47,530,8,47,1,48,1,48,1,48,1,49,1,49,
1,49,1,49,1,49,3,49,540,8,49,1,50,1,50,3,50,544,8,50,1,50,1,50,1,51,1,51,
3,51,550,8,51,1,52,1,52,1,52,5,52,555,8,52,10,52,12,52,558,9,52,1,53,1,53,
1,53,3,53,563,8,53,1,53,1,53,1,54,1,54,5,54,569,8,54,10,54,12,54,572,9,54,
1,54,1,54,1,54,1,54,3,54,578,8,54,1,55,1,55,1,55,1,56,1,56,3,56,585,8,56,
1,57,1,57,3,57,589,8,57,1,57,3,57,592,8,57,1,57,3,57,595,8,57,1,57,1,57,
1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,611,8,58,
1,59,1,59,1,59,1,60,1,60,1,60,3,60,619,8,60,1,60,1,60,3,60,623,8,60,1,60,
1,60,3,60,627,8,60,1,60,1,60,3,60,631,8,60,3,60,633,8,60,1,61,1,61,3,61,
637,8,61,1,61,3,61,640,8,61,1,61,3,61,643,8,61,1,61,3,61,646,8,61,1,61,1,
61,1,62,1,62,1,62,1,62,3,62,654,8,62,1,62,5,62,657,8,62,10,62,12,62,660,
9,62,1,63,1,63,3,63,664,8,63,1,63,1,63,1,64,1,64,1,64,1,64,3,64,672,8,64,
1,64,1,64,1,65,1,65,1,65,5,65,679,8,65,10,65,12,65,682,9,65,1,66,1,66,1,
66,3,66,687,8,66,1,66,3,66,690,8,66,1,66,1,66,1,67,1,67,1,67,1,67,1,68,1,
68,1,68,1,68,1,68,1,69,1,69,3,69,705,8,69,1,69,1,69,3,69,709,8,69,1,69,1,
69,1,69,1,69,1,70,1,70,4,70,717,8,70,11,70,12,70,718,1,71,1,71,1,71,1,71,
3,71,725,8,71,1,71,1,71,1,72,1,72,1,72,1,72,3,72,733,8,72,1,73,1,73,1,73,
1,73,1,73,1,74,1,74,1,74,5,74,743,8,74,10,74,12,74,746,9,74,1,75,1,75,3,
75,750,8,75,1,75,1,75,1,75,1,75,1,75,4,75,757,8,75,11,75,12,75,758,1,75,
1,75,3,75,763,8,75,1,75,1,75,1,76,1,76,1,76,3,76,770,8,76,1,77,1,77,1,77,
1,77,1,77,1,77,1,77,3,77,779,8,77,1,78,1,78,3,78,783,8,78,1,78,1,78,3,78,
787,8,78,3,78,789,8,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,
3,83,801,8,83,1,83,1,83,1,84,1,84,1,84,1,84,5,84,809,8,84,10,84,12,84,812,
9,84,3,84,814,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,86,1,86,3,86,824,8,86,
1,87,1,87,1,88,1,88,1,88,0,0,89,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
156,158,160,162,164,166,168,170,172,174,176,0,10,2,0,37,38,42,43,2,0,40,
40,47,47,1,0,1,2,2,0,1,1,3,7,1,0,18,19,2,0,20,21,23,23,1,0,33,36,1,0,71,
72,2,0,30,35,89,90,1,0,36,88,864,0,178,1,0,0,0,2,186,1,0,0,0,4,188,1,0,0,
0,6,197,1,0,0,0,8,199,1,0,0,0,10,211,1,0,0,0,12,214,1,0,0,0,14,219,1,0,0,
0,16,222,1,0,0,0,18,226,1,0,0,0,20,240,1,0,0,0,22,249,1,0,0,0,24,254,1,0,
0,0,26,258,1,0,0,0,28,271,1,0,0,0,30,288,1,0,0,0,32,305,1,0,0,0,34,310,1,
0,0,0,36,318,1,0,0,0,38,325,1,0,0,0,40,328,1,0,0,0,42,333,1,0,0,0,44,346,
1,0,0,0,46,348,1,0,0,0,48,355,1,0,0,0,50,361,1,0,0,0,52,375,1,0,0,0,54,379,
1,0,0,0,56,387,1,0,0,0,58,391,1,0,0,0,60,411,1,0,0,0,62,415,1,0,0,0,64,419,
1,0,0,0,66,422,1,0,0,0,68,426,1,0,0,0,70,429,1,0,0,0,72,437,1,0,0,0,74,445,
1,0,0,0,76,453,1,0,0,0,78,462,1,0,0,0,80,466,1,0,0,0,82,475,1,0,0,0,84,477,
1,0,0,0,86,485,1,0,0,0,88,493,1,0,0,0,90,502,1,0,0,0,92,506,1,0,0,0,94,529,
1,0,0,0,96,531,1,0,0,0,98,539,1,0,0,0,100,541,1,0,0,0,102,547,1,0,0,0,104,
551,1,0,0,0,106,562,1,0,0,0,108,577,1,0,0,0,110,579,1,0,0,0,112,584,1,0,
0,0,114,586,1,0,0,0,116,610,1,0,0,0,118,612,1,0,0,0,120,632,1,0,0,0,122,
634,1,0,0,0,124,649,1,0,0,0,126,661,1,0,0,0,128,667,1,0,0,0,130,675,1,0,
0,0,132,683,1,0,0,0,134,693,1,0,0,0,136,697,1,0,0,0,138,702,1,0,0,0,140,
714,1,0,0,0,142,720,1,0,0,0,144,728,1,0,0,0,146,734,1,0,0,0,148,739,1,0,
0,0,150,747,1,0,0,0,152,766,1,0,0,0,154,778,1,0,0,0,156,780,1,0,0,0,158,
790,1,0,0,0,160,792,1,0,0,0,162,794,1,0,0,0,164,796,1,0,0,0,166,798,1,0,
0,0,168,804,1,0,0,0,170,817,1,0,0,0,172,823,1,0,0,0,174,825,1,0,0,0,176,
827,1,0,0,0,178,180,3,2,1,0,179,181,5,9,0,0,180,179,1,0,0,0,180,181,1,0,
0,0,181,182,1,0,0,0,182,183,5,0,0,1,183,1,1,0,0,0,184,187,3,4,2,0,185,187,
3,8,4,0,186,184,1,0,0,0,186,185,1,0,0,0,187,3,1,0,0,0,188,192,3,6,3,0,189,
191,3,126,63,0,190,189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,
0,0,0,193,5,1,0,0,0,194,192,1,0,0,0,195,198,3,28,14,0,196,198,3,30,15,0,
197,195,1,0,0,0,197,196,1,0,0,0,198,7,1,0,0,0,199,200,5,28,0,0,200,202,3,
130,65,0,201,203,3,48,24,0,202,201,1,0,0,0,202,203,1,0,0,0,203,209,1,0,0,
0,204,207,5,29,0,0,205,208,5,23,0,0,206,208,3,50,25,0,207,205,1,0,0,0,207,
206,1,0,0,0,208,210,1,0,0,0,209,204,1,0,0,0,209,210,1,0,0,0,210,9,1,0,0,
0,211,212,5,53,0,0,212,213,3,18,9,0,213,11,1,0,0,0,214,215,5,57,0,0,215,
217,3,18,9,0,216,218,3,68,34,0,217,216,1,0,0,0,217,218,1,0,0,0,218,13,1,
0,0,0,219,220,5,55,0,0,220,221,3,72,36,0,221,15,1,0,0,0,222,223,5,46,0,0,
223,224,3,72,36,0,224,17,1,0,0,0,225,227,5,63,0,0,226,225,1,0,0,0,226,227,
1,0,0,0,227,228,1,0,0,0,228,230,3,20,10,0,229,231,3,26,13,0,230,229,1,0,
0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,234,3,14,7,0,233,232,1,0,0,0,233,
234,1,0,0,0,234,236,1,0,0,0,235,237,3,16,8,0,236,235,1,0,0,0,236,237,1,0,
0,0,237,19,1,0,0,0,238,241,5,23,0,0,239,241,3,22,11,0,240,238,1,0,0,0,240,
239,1,0,0,0,241,246,1,0,0,0,242,243,5,11,0,0,243,245,3,22,11,0,244,242,1,
0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,21,1,0,0,0,248,
246,1,0,0,0,249,252,3,72,36,0,250,251,5,61,0,0,251,253,3,174,87,0,252,250,
1,0,0,0,252,253,1,0,0,0,253,23,1,0,0,0,254,256,3,72,36,0,255,257,7,0,0,0,
256,255,1,0,0,0,256,257,1,0,0,0,257,25,1,0,0,0,258,259,5,51,0,0,259,260,
5,39,0,0,260,265,3,24,12,0,261,262,5,11,0,0,262,264,3,24,12,0,263,261,1,
0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,27,1,0,0,0,267,
265,1,0,0,0,268,270,3,36,18,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,
0,0,0,271,272,1,0,0,0,272,283,1,0,0,0,273,271,1,0,0,0,274,284,3,10,5,0,275,
277,3,38,19,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,279,1,
0,0,0,279,281,1,0,0,0,280,282,3,10,5,0,281,280,1,0,0,0,281,282,1,0,0,0,282,
284,1,0,0,0,283,274,1,0,0,0,283,276,1,0,0,0,284,29,1,0,0,0,285,287,3,36,
18,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,
298,1,0,0,0,290,288,1,0,0,0,291,293,3,38,19,0,292,291,1,0,0,0,293,296,1,
0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,294,1,0,0,0,297,
299,3,12,6,0,298,294,1,0,0,0,299,300,1,0,0,0,300,298,1,0,0,0,300,301,1,0,
0,0,301,302,1,0,0,0,302,303,3,28,14,0,303,31,1,0,0,0,304,306,5,50,0,0,305,
304,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,5,47,0,0,308,309,3,66,
33,0,309,33,1,0,0,0,310,311,5,59,0,0,311,312,3,72,36,0,312,313,5,61,0,0,
313,314,3,174,87,0,314,35,1,0,0,0,315,319,3,32,16,0,316,319,3,34,17,0,317,
319,3,46,23,0,318,315,1,0,0,0,318,316,1,0,0,0,318,317,1,0,0,0,319,37,1,0,
0,0,320,326,3,64,32,0,321,326,3,54,27,0,322,326,3,40,20,0,323,326,3,58,29,
0,324,326,3,42,21,0,325,320,1,0,0,0,325,321,1,0,0,0,325,322,1,0,0,0,325,
323,1,0,0,0,325,324,1,0,0,0,326,39,1,0,0,0,327,329,5,44,0,0,328,327,1,0,
0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,331,5,41,0,0,331,332,3,148,74,0,
332,41,1,0,0,0,333,334,5,52,0,0,334,339,3,44,22,0,335,336,5,11,0,0,336,338,
3,44,22,0,337,335,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,
0,340,43,1,0,0,0,341,339,1,0,0,0,342,343,3,174,87,0,343,344,3,62,31,0,344,
347,1,0,0,0,345,347,3,104,52,0,346,342,1,0,0,0,346,345,1,0,0,0,347,45,1,
0,0,0,348,349,5,28,0,0,349,350,3,130,65,0,350,353,3,48,24,0,351,352,5,29,
0,0,352,354,3,50,25,0,353,351,1,0,0,0,353,354,1,0,0,0,354,47,1,0,0,0,355,
357,5,12,0,0,356,358,3,148,74,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,
1,0,0,0,359,360,5,13,0,0,360,49,1,0,0,0,361,366,3,52,26,0,362,363,5,11,0,
0,363,365,3,52,26,0,364,362,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,
367,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,369,371,3,68,34,0,370,369,1,
0,0,0,370,371,1,0,0,0,371,51,1,0,0,0,372,373,3,174,87,0,373,374,5,61,0,0,
374,376,1,0,0,0,375,372,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,378,
3,174,87,0,378,53,1,0,0,0,379,380,5,48,0,0,380,384,3,106,53,0,381,383,3,
56,28,0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,
385,55,1,0,0,0,386,384,1,0,0,0,387,388,5,49,0,0,388,389,7,1,0,0,389,390,
3,58,29,0,390,57,1,0,0,0,391,392,5,54,0,0,392,397,3,60,30,0,393,394,5,11,
0,0,394,396,3,60,30,0,395,393,1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,397,
398,1,0,0,0,398,59,1,0,0,0,399,397,1,0,0,0,400,401,3,104,52,0,401,402,5,
1,0,0,402,403,3,72,36,0,403,412,1,0,0,0,404,405,3,174,87,0,405,406,7,2,0,
0,406,407,3,72,36,0,407,412,1,0,0,0,408,409,3,174,87,0,409,410,3,62,31,0,
410,412,1,0,0,0,411,400,1,0,0,0,411,404,1,0,0,0,411,408,1,0,0,0,412,61,1,
0,0,0,413,414,5,25,0,0,414,416,3,172,86,0,415,413,1,0,0,0,416,417,1,0,0,
0,417,415,1,0,0,0,417,418,1,0,0,0,418,63,1,0,0,0,419,420,5,40,0,0,420,421,
3,70,35,0,421,65,1,0,0,0,422,424,3,70,35,0,423,425,3,68,34,0,424,423,1,0,
0,0,424,425,1,0,0,0,425,67,1,0,0,0,426,427,5,56,0,0,427,428,3,72,36,0,428,
69,1,0,0,0,429,434,3,106,53,0,430,431,5,11,0,0,431,433,3,106,53,0,432,430,
1,0,0,0,433,436,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,71,1,0,0,0,436,
434,1,0,0,0,437,442,3,74,37,0,438,439,5,68,0,0,439,441,3,74,37,0,440,438,
1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,73,1,0,0,0,444,
442,1,0,0,0,445,450,3,76,38,0,446,447,5,70,0,0,447,449,3,76,38,0,448,446,
1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,75,1,0,0,0,452,
450,1,0,0,0,453,458,3,78,39,0,454,455,5,60,0,0,455,457,3,78,39,0,456,454,
1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,77,1,0,0,0,460,
458,1,0,0,0,461,463,5,67,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,
0,0,464,465,3,80,40,0,465,79,1,0,0,0,466,472,3,84,42,0,467,468,3,82,41,0,
468,469,3,84,42,0,469,471,1,0,0,0,470,467,1,0,0,0,471,474,1,0,0,0,472,470,
1,0,0,0,472,473,1,0,0,0,473,81,1,0,0,0,474,472,1,0,0,0,475,476,7,3,0,0,476,
83,1,0,0,0,477,482,3,86,43,0,478,479,7,4,0,0,479,481,3,86,43,0,480,478,1,
0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,85,1,0,0,0,484,
482,1,0,0,0,485,490,3,88,44,0,486,487,7,5,0,0,487,489,3,88,44,0,488,486,
1,0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,87,1,0,0,0,492,
490,1,0,0,0,493,498,3,90,45,0,494,495,5,22,0,0,495,497,3,90,45,0,496,494,
1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,89,1,0,0,0,500,
498,1,0,0,0,501,503,7,4,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,1,0,
0,0,504,505,3,92,46,0,505,91,1,0,0,0,506,512,3,102,51,0,507,511,3,96,48,
0,508,511,3,94,47,0,509,511,3,100,50,0,510,507,1,0,0,0,510,508,1,0,0,0,510,
509,1,0,0,0,511,514,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,93,1,0,0,
0,514,512,1,0,0,0,515,516,5,65,0,0,516,530,3,102,51,0,517,526,5,16,0,0,518,
520,3,72,36,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,523,5,
8,0,0,522,524,3,72,36,0,523,522,1,0,0,0,523,524,1,0,0,0,524,527,1,0,0,0,
525,527,3,72,36,0,526,519,1,0,0,0,526,525,1,0,0,0,527,528,1,0,0,0,528,530,
5,17,0,0,529,515,1,0,0,0,529,517,1,0,0,0,530,95,1,0,0,0,531,532,3,98,49,
0,532,533,3,102,51,0,533,97,1,0,0,0,534,535,5,69,0,0,535,540,5,57,0,0,536,
537,5,64,0,0,537,540,5,57,0,0,538,540,5,62,0,0,539,534,1,0,0,0,539,536,1,
0,0,0,539,538,1,0,0,0,540,99,1,0,0,0,541,543,5,66,0,0,542,544,5,67,0,0,543,
542,1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,5,73,0,0,546,101,1,0,
0,0,547,549,3,104,52,0,548,550,3,62,31,0,549,548,1,0,0,0,549,550,1,0,0,0,
550,103,1,0,0,0,551,556,3,116,58,0,552,553,5,10,0,0,553,555,3,172,86,0,554,
552,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,105,1,0,
0,0,558,556,1,0,0,0,559,560,3,174,87,0,560,561,5,1,0,0,561,563,1,0,0,0,562,
559,1,0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,564,565,3,108,54,0,565,107,1,
0,0,0,566,570,3,114,57,0,567,569,3,110,55,0,568,567,1,0,0,0,569,572,1,0,
0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,578,1,0,0,0,572,570,1,0,0,0,573,
574,5,12,0,0,574,575,3,108,54,0,575,576,5,13,0,0,576,578,1,0,0,0,577,566,
1,0,0,0,577,573,1,0,0,0,578,109,1,0,0,0,579,580,3,120,60,0,580,581,3,114,
57,0,581,111,1,0,0,0,582,585,3,168,84,0,583,585,3,152,76,0,584,582,1,0,0,
0,584,583,1,0,0,0,585,113,1,0,0,0,586,588,5,12,0,0,587,589,3,174,87,0,588,
587,1,0,0,0,588,589,1,0,0,0,589,591,1,0,0,0,590,592,3,62,31,0,591,590,1,
0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,595,3,112,56,0,594,593,1,0,0,0,
594,595,1,0,0,0,595,596,1,0,0,0,596,597,5,13,0,0,597,115,1,0,0,0,598,611,
3,154,77,0,599,611,3,152,76,0,600,611,3,150,75,0,601,611,3,146,73,0,602,
611,3,142,71,0,603,611,3,138,69,0,604,611,3,136,68,0,605,611,3,140,70,0,
606,611,3,134,67,0,607,611,3,132,66,0,608,611,3,174,87,0,609,611,3,128,64,
0,610,598,1,0,0,0,610,599,1,0,0,0,610,600,1,0,0,0,610,601,1,0,0,0,610,602,
1,0,0,0,610,603,1,0,0,0,610,604,1,0,0,0,610,605,1,0,0,0,610,606,1,0,0,0,
610,607,1,0,0,0,610,608,1,0,0,0,610,609,1,0,0,0,611,117,1,0,0,0,612,613,
3,174,87,0,613,614,5,1,0,0,614,119,1,0,0,0,615,616,5,6,0,0,616,618,5,18,
0,0,617,619,3,122,61,0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,
622,5,18,0,0,621,623,5,5,0,0,622,621,1,0,0,0,622,623,1,0,0,0,623,633,1,0,
0,0,624,626,5,18,0,0,625,627,3,122,61,0,626,625,1,0,0,0,626,627,1,0,0,0,
627,628,1,0,0,0,628,630,5,18,0,0,629,631,5,5,0,0,630,629,1,0,0,0,630,631,
1,0,0,0,631,633,1,0,0,0,632,615,1,0,0,0,632,624,1,0,0,0,633,121,1,0,0,0,
634,636,5,16,0,0,635,637,3,174,87,0,636,635,1,0,0,0,636,637,1,0,0,0,637,
639,1,0,0,0,638,640,3,124,62,0,639,638,1,0,0,0,639,640,1,0,0,0,640,642,1,
0,0,0,641,643,3,156,78,0,642,641,1,0,0,0,642,643,1,0,0,0,643,645,1,0,0,0,
644,646,3,112,56,0,645,644,1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,648,
5,17,0,0,648,123,1,0,0,0,649,650,5,25,0,0,650,658,3,172,86,0,651,653,5,26,
0,0,652,654,5,25,0,0,653,652,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,
657,3,172,86,0,656,651,1,0,0,0,657,660,1,0,0,0,658,656,1,0,0,0,658,659,1,
0,0,0,659,125,1,0,0,0,660,658,1,0,0,0,661,663,5,58,0,0,662,664,5,36,0,0,
663,662,1,0,0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,666,3,6,3,0,666,127,
1,0,0,0,667,668,5,45,0,0,668,671,5,14,0,0,669,672,3,4,2,0,670,672,3,66,33,
0,671,669,1,0,0,0,671,670,1,0,0,0,672,673,1,0,0,0,673,674,5,15,0,0,674,129,
1,0,0,0,675,680,3,174,87,0,676,677,5,10,0,0,677,679,3,174,87,0,678,676,1,
0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,131,1,0,0,0,682,
680,1,0,0,0,683,684,3,130,65,0,684,686,5,12,0,0,685,687,5,63,0,0,686,685,
1,0,0,0,686,687,1,0,0,0,687,689,1,0,0,0,688,690,3,148,74,0,689,688,1,0,0,
0,689,690,1,0,0,0,690,691,1,0,0,0,691,692,5,13,0,0,692,133,1,0,0,0,693,694,
5,12,0,0,694,695,3,72,36,0,695,696,5,13,0,0,696,135,1,0,0,0,697,698,7,6,
0,0,698,699,5,12,0,0,699,700,3,144,72,0,700,701,5,13,0,0,701,137,1,0,0,0,
702,704,5,16,0,0,703,705,3,118,59,0,704,703,1,0,0,0,704,705,1,0,0,0,705,
706,1,0,0,0,706,708,3,140,70,0,707,709,3,68,34,0,708,707,1,0,0,0,708,709,
1,0,0,0,709,710,1,0,0,0,710,711,5,26,0,0,711,712,3,72,36,0,712,713,5,17,
0,0,713,139,1,0,0,0,714,716,3,114,57,0,715,717,3,110,55,0,716,715,1,0,0,
0,717,718,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,141,1,0,0,0,720,721,
5,16,0,0,721,724,3,144,72,0,722,723,5,26,0,0,723,725,3,72,36,0,724,722,1,
0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,727,5,17,0,0,727,143,1,0,0,0,728,
729,3,174,87,0,729,730,5,65,0,0,730,732,3,72,36,0,731,733,3,68,34,0,732,
731,1,0,0,0,732,733,1,0,0,0,733,145,1,0,0,0,734,735,5,32,0,0,735,736,5,12,
0,0,736,737,5,23,0,0,737,738,5,13,0,0,738,147,1,0,0,0,739,744,3,72,36,0,
740,741,5,11,0,0,741,743,3,72,36,0,742,740,1,0,0,0,743,746,1,0,0,0,744,742,
1,0,0,0,744,745,1,0,0,0,745,149,1,0,0,0,746,744,1,0,0,0,747,749,5,79,0,0,
748,750,3,72,36,0,749,748,1,0,0,0,749,750,1,0,0,0,750,756,1,0,0,0,751,752,
5,80,0,0,752,753,3,72,36,0,753,754,5,81,0,0,754,755,3,72,36,0,755,757,1,
0,0,0,756,751,1,0,0,0,757,758,1,0,0,0,758,756,1,0,0,0,758,759,1,0,0,0,759,
762,1,0,0,0,760,761,5,82,0,0,761,763,3,72,36,0,762,760,1,0,0,0,762,763,1,
0,0,0,763,764,1,0,0,0,764,765,5,83,0,0,765,151,1,0,0,0,766,769,5,27,0,0,
767,770,3,174,87,0,768,770,3,160,80,0,769,767,1,0,0,0,769,768,1,0,0,0,770,
153,1,0,0,0,771,779,3,158,79,0,772,779,3,160,80,0,773,779,5,73,0,0,774,779,
3,162,81,0,775,779,3,164,82,0,776,779,3,166,83,0,777,779,3,168,84,0,778,
771,1,0,0,0,778,772,1,0,0,0,778,773,1,0,0,0,778,774,1,0,0,0,778,775,1,0,
0,0,778,776,1,0,0,0,778,777,1,0,0,0,779,155,1,0,0,0,780,782,5,23,0,0,781,
783,3,160,80,0,782,781,1,0,0,0,782,783,1,0,0,0,783,788,1,0,0,0,784,786,5,
8,0,0,785,787,3,160,80,0,786,785,1,0,0,0,786,787,1,0,0,0,787,789,1,0,0,0,
788,784,1,0,0,0,788,789,1,0,0,0,789,157,1,0,0,0,790,791,7,7,0,0,791,159,
1,0,0,0,792,793,5,93,0,0,793,161,1,0,0,0,794,795,5,92,0,0,795,163,1,0,0,
0,796,797,5,91,0,0,797,165,1,0,0,0,798,800,5,16,0,0,799,801,3,148,74,0,800,
799,1,0,0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,803,5,17,0,0,803,167,1,0,
0,0,804,813,5,14,0,0,805,810,3,170,85,0,806,807,5,11,0,0,807,809,3,170,85,
0,808,806,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,814,
1,0,0,0,812,810,1,0,0,0,813,805,1,0,0,0,813,814,1,0,0,0,814,815,1,0,0,0,
815,816,5,15,0,0,816,169,1,0,0,0,817,818,3,172,86,0,818,819,5,25,0,0,819,
820,3,72,36,0,820,171,1,0,0,0,821,824,3,174,87,0,822,824,3,176,88,0,823,
821,1,0,0,0,823,822,1,0,0,0,824,173,1,0,0,0,825,826,7,8,0,0,826,175,1,0,
0,0,827,828,7,9,0,0,828,177,1,0,0,0,102,180,186,192,197,202,207,209,217,
226,230,233,236,240,246,252,256,265,271,278,281,283,288,294,300,305,318,
325,328,339,346,353,357,366,370,375,384,397,411,417,424,434,442,450,458,
462,472,482,490,498,502,510,512,519,523,526,529,539,543,549,556,562,570,
577,584,588,591,594,610,618,622,626,630,632,636,639,642,645,653,658,663,
671,680,686,689,704,708,718,724,732,744,749,758,762,769,778,782,786,788,
800,810,813,823];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class CypherParser extends antlr4.Parser {

    static grammarFileName = "CypherParser.g4";
    static literalNames = [ null, "'='", "'+='", "'<='", "'>='", "'>'", 
                            "'<'", "'<>'", "'..'", "';'", "'.'", "','", 
                            "'('", "')'", "'{'", "'}'", "'['", "']'", "'-'", 
                            "'+'", "'/'", "'%'", "'^'", "'*'", "'`'", "':'", 
                            "'|'", "'$'", "'CALL'", "'YIELD'", "'FILTER'", 
                            "'EXTRACT'", "'COUNT'", "'ANY'", "'NONE'", "'SINGLE'", 
                            "'ALL'", "'ASC'", "'ASCENDING'", "'BY'", "'CREATE'", 
                            "'DELETE'", "'DESC'", "'DESCENDING'", "'DETACH'", 
                            "'EXISTS'", "'LIMIT'", "'MATCH'", "'MERGE'", 
                            "'ON'", "'OPTIONAL'", "'ORDER'", "'REMOVE'", 
                            "'RETURN'", "'SET'", "'SKIP'", "'WHERE'", "'WITH'", 
                            "'UNION'", "'UNWIND'", "'AND'", "'AS'", "'CONTAINS'", 
                            "'DISTINCT'", "'ENDS'", "'IN'", "'IS'", "'NOT'", 
                            "'OR'", "'STARTS'", "'XOR'", "'FALSE'", "'TRUE'", 
                            "'NULL'", "'CONSTRAINT'", "'DO'", "'FOR'", "'REQUIRE'", 
                            "'UNIQUE'", "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", 
                            "'END'", "'MANDATORY'", "'SCALAR'", "'OF'", 
                            "'ADD'", "'DROP'" ];
    static symbolicNames = [ null, "ASSIGN", "ADD_ASSIGN", "LE", "GE", "GT", 
                             "LT", "NOT_EQUAL", "RANGE", "SEMI", "DOT", 
                             "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                             "LBRACK", "RBRACK", "SUB", "PLUS", "DIV", "MOD", 
                             "CARET", "MULT", "ESC", "COLON", "STICK", "DOLLAR", 
                             "CALL", "YIELD", "FILTER", "EXTRACT", "COUNT", 
                             "ANY", "NONE", "SINGLE", "ALL", "ASC", "ASCENDING", 
                             "BY", "CREATE", "DELETE", "DESC", "DESCENDING", 
                             "DETACH", "EXISTS", "LIMIT", "MATCH", "MERGE", 
                             "ON", "OPTIONAL", "ORDER", "REMOVE", "RETURN", 
                             "SET", "SKIP_W", "WHERE", "WITH", "UNION", 
                             "UNWIND", "AND", "AS", "CONTAINS", "DISTINCT", 
                             "ENDS", "IN", "IS", "NOT", "OR", "STARTS", 
                             "XOR", "FALSE", "TRUE", "NULL_W", "CONSTRAINT", 
                             "DO", "FOR", "REQUIRE", "UNIQUE", "CASE", "WHEN", 
                             "THEN", "ELSE", "END", "MANDATORY", "SCALAR", 
                             "OF", "ADD", "DROP", "ID", "ESC_LITERAL", "CHAR_LITERAL", 
                             "STRING_LITERAL", "DIGIT", "FLOAT", "WS", "COMMENT", 
                             "LINE_COMMENT", "ERRCHAR", "Letter" ];
    static ruleNames = [ "script", "query", "regularQuery", "singleQuery", 
                         "standaloneCall", "returnSt", "withSt", "skipSt", 
                         "limitSt", "projectionBody", "projectionItems", 
                         "projectionItem", "orderItem", "orderSt", "singlePartQ", 
                         "multiPartQ", "matchSt", "unwindSt", "readingStatement", 
                         "updatingStatement", "deleteSt", "removeSt", "removeItem", 
                         "queryCallSt", "parenExpressionChain", "yieldItems", 
                         "yieldItem", "mergeSt", "mergeAction", "setSt", 
                         "setItem", "nodeLabels", "createSt", "patternWhere", 
                         "where", "pattern", "expression", "xorExpression", 
                         "andExpression", "notExpression", "comparisonExpression", 
                         "comparisonSigns", "addSubExpression", "multDivExpression", 
                         "powerExpression", "unaryAddSubExpression", "atomicExpression", 
                         "listExpression", "stringExpression", "stringExpPrefix", 
                         "nullExpression", "propertyOrLabelExpression", 
                         "propertyExpression", "patternPart", "patternElem", 
                         "patternElemChain", "properties", "nodePattern", 
                         "atom", "lhs", "relationshipPattern", "relationDetail", 
                         "relationshipTypes", "unionSt", "subqueryExist", 
                         "invocationName", "functionInvocation", "parenthesizedExpression", 
                         "filterWith", "patternComprehension", "relationshipsChainPattern", 
                         "listComprehension", "filterExpression", "countAll", 
                         "expressionChain", "caseExpression", "parameter", 
                         "literal", "rangeLit", "boolLit", "numLit", "stringLit", 
                         "charLit", "listLit", "mapLit", "mapPair", "name", 
                         "symbol", "reservedWord" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CypherParser.ruleNames;
        this.literalNames = CypherParser.literalNames;
        this.symbolicNames = CypherParser.symbolicNames;
    }



	script() {
	    let localctx = new ScriptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CypherParser.RULE_script);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 178;
	        this.query();
	        this.state = 180;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 179;
	            this.match(CypherParser.SEMI);
	        }

	        this.state = 182;
	        this.match(CypherParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CypherParser.RULE_query);
	    try {
	        this.state = 186;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 184;
	            this.regularQuery();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 185;
	            this.standaloneCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularQuery() {
	    let localctx = new RegularQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CypherParser.RULE_regularQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 188;
	        this.singleQuery();
	        this.state = 192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===58) {
	            this.state = 189;
	            this.unionSt();
	            this.state = 194;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleQuery() {
	    let localctx = new SingleQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CypherParser.RULE_singleQuery);
	    try {
	        this.state = 197;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 195;
	            this.singlePartQ();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 196;
	            this.multiPartQ();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	standaloneCall() {
	    let localctx = new StandaloneCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CypherParser.RULE_standaloneCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 199;
	        this.match(CypherParser.CALL);
	        this.state = 200;
	        this.invocationName();
	        this.state = 202;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 201;
	            this.parenExpressionChain();
	        }

	        this.state = 209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 204;
	            this.match(CypherParser.YIELD);
	            this.state = 207;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 23:
	                this.state = 205;
	                this.match(CypherParser.MULT);
	                break;
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 89:
	            case 90:
	                this.state = 206;
	                this.yieldItems();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnSt() {
	    let localctx = new ReturnStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CypherParser.RULE_returnSt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 211;
	        this.match(CypherParser.RETURN);
	        this.state = 212;
	        this.projectionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withSt() {
	    let localctx = new WithStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CypherParser.RULE_withSt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 214;
	        this.match(CypherParser.WITH);
	        this.state = 215;
	        this.projectionBody();
	        this.state = 217;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 216;
	            this.where();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skipSt() {
	    let localctx = new SkipStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CypherParser.RULE_skipSt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 219;
	        this.match(CypherParser.SKIP_W);
	        this.state = 220;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitSt() {
	    let localctx = new LimitStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CypherParser.RULE_limitSt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 222;
	        this.match(CypherParser.LIMIT);
	        this.state = 223;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectionBody() {
	    let localctx = new ProjectionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CypherParser.RULE_projectionBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 226;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===63) {
	            this.state = 225;
	            this.match(CypherParser.DISTINCT);
	        }

	        this.state = 228;
	        this.projectionItems();
	        this.state = 230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51) {
	            this.state = 229;
	            this.orderSt();
	        }

	        this.state = 233;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===55) {
	            this.state = 232;
	            this.skipSt();
	        }

	        this.state = 236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===46) {
	            this.state = 235;
	            this.limitSt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectionItems() {
	    let localctx = new ProjectionItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CypherParser.RULE_projectionItems);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 240;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	            this.state = 238;
	            this.match(CypherParser.MULT);
	            break;
	        case 12:
	        case 14:
	        case 16:
	        case 18:
	        case 19:
	        case 27:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 45:
	        case 67:
	        case 71:
	        case 72:
	        case 73:
	        case 79:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	            this.state = 239;
	            this.projectionItem();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11) {
	            this.state = 242;
	            this.match(CypherParser.COMMA);
	            this.state = 243;
	            this.projectionItem();
	            this.state = 248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectionItem() {
	    let localctx = new ProjectionItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CypherParser.RULE_projectionItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 249;
	        this.expression();
	        this.state = 252;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===61) {
	            this.state = 250;
	            this.match(CypherParser.AS);
	            this.state = 251;
	            this.symbol();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderItem() {
	    let localctx = new OrderItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CypherParser.RULE_orderItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 254;
	        this.expression();
	        this.state = 256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 99) !== 0)) {
	            this.state = 255;
	            _la = this._input.LA(1);
	            if(!(((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 99) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderSt() {
	    let localctx = new OrderStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CypherParser.RULE_orderSt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 258;
	        this.match(CypherParser.ORDER);
	        this.state = 259;
	        this.match(CypherParser.BY);
	        this.state = 260;
	        this.orderItem();
	        this.state = 265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11) {
	            this.state = 261;
	            this.match(CypherParser.COMMA);
	            this.state = 262;
	            this.orderItem();
	            this.state = 267;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singlePartQ() {
	    let localctx = new SinglePartQContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CypherParser.RULE_singlePartQ);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 28)) & ~0x1f) === 0 && ((1 << (_la - 28)) & 2152202241) !== 0)) {
	            this.state = 268;
	            this.readingStatement();
	            this.state = 273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 283;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 53:
	            this.state = 274;
	            this.returnSt();
	            break;
	        case 40:
	        case 41:
	        case 44:
	        case 48:
	        case 52:
	        case 54:
	            this.state = 276; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 275;
	                this.updatingStatement();
	                this.state = 278; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 20755) !== 0));
	            this.state = 281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53) {
	                this.state = 280;
	                this.returnSt();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiPartQ() {
	    let localctx = new MultiPartQContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CypherParser.RULE_multiPartQ);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 28)) & ~0x1f) === 0 && ((1 << (_la - 28)) & 2152202241) !== 0)) {
	            this.state = 285;
	            this.readingStatement();
	            this.state = 290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 298; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 294;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		while(((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 20755) !== 0)) {
	        		    this.state = 291;
	        		    this.updatingStatement();
	        		    this.state = 296;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		}
	        		this.state = 297;
	        		this.withSt();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 300; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,23, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 302;
	        this.singlePartQ();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchSt() {
	    let localctx = new MatchStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CypherParser.RULE_matchSt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 305;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===50) {
	            this.state = 304;
	            this.match(CypherParser.OPTIONAL);
	        }

	        this.state = 307;
	        this.match(CypherParser.MATCH);
	        this.state = 308;
	        this.patternWhere();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unwindSt() {
	    let localctx = new UnwindStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CypherParser.RULE_unwindSt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 310;
	        this.match(CypherParser.UNWIND);
	        this.state = 311;
	        this.expression();
	        this.state = 312;
	        this.match(CypherParser.AS);
	        this.state = 313;
	        this.symbol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readingStatement() {
	    let localctx = new ReadingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CypherParser.RULE_readingStatement);
	    try {
	        this.state = 318;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 47:
	        case 50:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 315;
	            this.matchSt();
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 316;
	            this.unwindSt();
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 317;
	            this.queryCallSt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updatingStatement() {
	    let localctx = new UpdatingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CypherParser.RULE_updatingStatement);
	    try {
	        this.state = 325;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 320;
	            this.createSt();
	            break;
	        case 48:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 321;
	            this.mergeSt();
	            break;
	        case 41:
	        case 44:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 322;
	            this.deleteSt();
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 323;
	            this.setSt();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 324;
	            this.removeSt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteSt() {
	    let localctx = new DeleteStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CypherParser.RULE_deleteSt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44) {
	            this.state = 327;
	            this.match(CypherParser.DETACH);
	        }

	        this.state = 330;
	        this.match(CypherParser.DELETE);
	        this.state = 331;
	        this.expressionChain();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeSt() {
	    let localctx = new RemoveStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CypherParser.RULE_removeSt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 333;
	        this.match(CypherParser.REMOVE);
	        this.state = 334;
	        this.removeItem();
	        this.state = 339;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11) {
	            this.state = 335;
	            this.match(CypherParser.COMMA);
	            this.state = 336;
	            this.removeItem();
	            this.state = 341;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItem() {
	    let localctx = new RemoveItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CypherParser.RULE_removeItem);
	    try {
	        this.state = 346;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 342;
	            this.symbol();
	            this.state = 343;
	            this.nodeLabels();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 345;
	            this.propertyExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryCallSt() {
	    let localctx = new QueryCallStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CypherParser.RULE_queryCallSt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 348;
	        this.match(CypherParser.CALL);
	        this.state = 349;
	        this.invocationName();
	        this.state = 350;
	        this.parenExpressionChain();
	        this.state = 353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 351;
	            this.match(CypherParser.YIELD);
	            this.state = 352;
	            this.yieldItems();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenExpressionChain() {
	    let localctx = new ParenExpressionChainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CypherParser.RULE_parenExpressionChain);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 355;
	        this.match(CypherParser.LPAREN);
	        this.state = 357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356315648) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 8223) !== 0) || ((((_la - 67)) & ~0x1f) === 0 && ((1 << (_la - 67)) & 130027633) !== 0)) {
	            this.state = 356;
	            this.expressionChain();
	        }

	        this.state = 359;
	        this.match(CypherParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItems() {
	    let localctx = new YieldItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CypherParser.RULE_yieldItems);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 361;
	        this.yieldItem();
	        this.state = 366;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11) {
	            this.state = 362;
	            this.match(CypherParser.COMMA);
	            this.state = 363;
	            this.yieldItem();
	            this.state = 368;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 370;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 369;
	            this.where();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItem() {
	    let localctx = new YieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CypherParser.RULE_yieldItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 375;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        if(la_===1) {
	            this.state = 372;
	            this.symbol();
	            this.state = 373;
	            this.match(CypherParser.AS);

	        }
	        this.state = 377;
	        this.symbol();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeSt() {
	    let localctx = new MergeStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CypherParser.RULE_mergeSt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 379;
	        this.match(CypherParser.MERGE);
	        this.state = 380;
	        this.patternPart();
	        this.state = 384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===49) {
	            this.state = 381;
	            this.mergeAction();
	            this.state = 386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeAction() {
	    let localctx = new MergeActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CypherParser.RULE_mergeAction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 387;
	        this.match(CypherParser.ON);
	        this.state = 388;
	        _la = this._input.LA(1);
	        if(!(_la===40 || _la===47)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 389;
	        this.setSt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setSt() {
	    let localctx = new SetStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CypherParser.RULE_setSt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 391;
	        this.match(CypherParser.SET);
	        this.state = 392;
	        this.setItem();
	        this.state = 397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11) {
	            this.state = 393;
	            this.match(CypherParser.COMMA);
	            this.state = 394;
	            this.setItem();
	            this.state = 399;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItem() {
	    let localctx = new SetItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CypherParser.RULE_setItem);
	    var _la = 0;
	    try {
	        this.state = 411;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 400;
	            this.propertyExpression();
	            this.state = 401;
	            this.match(CypherParser.ASSIGN);
	            this.state = 402;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 404;
	            this.symbol();
	            this.state = 405;
	            _la = this._input.LA(1);
	            if(!(_la===1 || _la===2)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 406;
	            this.expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 408;
	            this.symbol();
	            this.state = 409;
	            this.nodeLabels();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeLabels() {
	    let localctx = new NodeLabelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CypherParser.RULE_nodeLabels);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 415; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 413;
	            this.match(CypherParser.COLON);
	            this.state = 414;
	            this.name();
	            this.state = 417; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===25);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createSt() {
	    let localctx = new CreateStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CypherParser.RULE_createSt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 419;
	        this.match(CypherParser.CREATE);
	        this.state = 420;
	        this.pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternWhere() {
	    let localctx = new PatternWhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CypherParser.RULE_patternWhere);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this.pattern();
	        this.state = 424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 423;
	            this.where();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where() {
	    let localctx = new WhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CypherParser.RULE_where);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 426;
	        this.match(CypherParser.WHERE);
	        this.state = 427;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CypherParser.RULE_pattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429;
	        this.patternPart();
	        this.state = 434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11) {
	            this.state = 430;
	            this.match(CypherParser.COMMA);
	            this.state = 431;
	            this.patternPart();
	            this.state = 436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CypherParser.RULE_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 437;
	        this.xorExpression();
	        this.state = 442;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===68) {
	            this.state = 438;
	            this.match(CypherParser.OR);
	            this.state = 439;
	            this.xorExpression();
	            this.state = 444;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xorExpression() {
	    let localctx = new XorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CypherParser.RULE_xorExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 445;
	        this.andExpression();
	        this.state = 450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===70) {
	            this.state = 446;
	            this.match(CypherParser.XOR);
	            this.state = 447;
	            this.andExpression();
	            this.state = 452;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andExpression() {
	    let localctx = new AndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CypherParser.RULE_andExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 453;
	        this.notExpression();
	        this.state = 458;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===60) {
	            this.state = 454;
	            this.match(CypherParser.AND);
	            this.state = 455;
	            this.notExpression();
	            this.state = 460;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notExpression() {
	    let localctx = new NotExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CypherParser.RULE_notExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 462;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===67) {
	            this.state = 461;
	            this.match(CypherParser.NOT);
	        }

	        this.state = 464;
	        this.comparisonExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonExpression() {
	    let localctx = new ComparisonExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CypherParser.RULE_comparisonExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 466;
	        this.addSubExpression();
	        this.state = 472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 250) !== 0)) {
	            this.state = 467;
	            this.comparisonSigns();
	            this.state = 468;
	            this.addSubExpression();
	            this.state = 474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonSigns() {
	    let localctx = new ComparisonSignsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CypherParser.RULE_comparisonSigns);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 475;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 250) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addSubExpression() {
	    let localctx = new AddSubExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CypherParser.RULE_addSubExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 477;
	        this.multDivExpression();
	        this.state = 482;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===19) {
	            this.state = 478;
	            _la = this._input.LA(1);
	            if(!(_la===18 || _la===19)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 479;
	            this.multDivExpression();
	            this.state = 484;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multDivExpression() {
	    let localctx = new MultDivExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CypherParser.RULE_multDivExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        this.powerExpression();
	        this.state = 490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 11534336) !== 0)) {
	            this.state = 486;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 11534336) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 487;
	            this.powerExpression();
	            this.state = 492;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powerExpression() {
	    let localctx = new PowerExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CypherParser.RULE_powerExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 493;
	        this.unaryAddSubExpression();
	        this.state = 498;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 494;
	            this.match(CypherParser.CARET);
	            this.state = 495;
	            this.unaryAddSubExpression();
	            this.state = 500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryAddSubExpression() {
	    let localctx = new UnaryAddSubExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CypherParser.RULE_unaryAddSubExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===19) {
	            this.state = 501;
	            _la = this._input.LA(1);
	            if(!(_la===18 || _la===19)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 504;
	        this.atomicExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomicExpression() {
	    let localctx = new AtomicExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CypherParser.RULE_atomicExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 506;
	        this.propertyOrLabelExpression();
	        this.state = 512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16 || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 157) !== 0)) {
	            this.state = 510;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 62:
	            case 64:
	            case 69:
	                this.state = 507;
	                this.stringExpression();
	                break;
	            case 16:
	            case 65:
	                this.state = 508;
	                this.listExpression();
	                break;
	            case 66:
	                this.state = 509;
	                this.nullExpression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 514;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listExpression() {
	    let localctx = new ListExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CypherParser.RULE_listExpression);
	    var _la = 0;
	    try {
	        this.state = 529;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 515;
	            this.match(CypherParser.IN);
	            this.state = 516;
	            this.propertyOrLabelExpression();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 517;
	            this.match(CypherParser.LBRACK);
	            this.state = 526;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 519;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356315648) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 8223) !== 0) || ((((_la - 67)) & ~0x1f) === 0 && ((1 << (_la - 67)) & 130027633) !== 0)) {
	                    this.state = 518;
	                    this.expression();
	                }

	                this.state = 521;
	                this.match(CypherParser.RANGE);
	                this.state = 523;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356315648) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 8223) !== 0) || ((((_la - 67)) & ~0x1f) === 0 && ((1 << (_la - 67)) & 130027633) !== 0)) {
	                    this.state = 522;
	                    this.expression();
	                }

	                break;

	            case 2:
	                this.state = 525;
	                this.expression();
	                break;

	            }
	            this.state = 528;
	            this.match(CypherParser.RBRACK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringExpression() {
	    let localctx = new StringExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CypherParser.RULE_stringExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 531;
	        this.stringExpPrefix();
	        this.state = 532;
	        this.propertyOrLabelExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringExpPrefix() {
	    let localctx = new StringExpPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CypherParser.RULE_stringExpPrefix);
	    try {
	        this.state = 539;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 69:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 534;
	            this.match(CypherParser.STARTS);
	            this.state = 535;
	            this.match(CypherParser.WITH);
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 536;
	            this.match(CypherParser.ENDS);
	            this.state = 537;
	            this.match(CypherParser.WITH);
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 538;
	            this.match(CypherParser.CONTAINS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullExpression() {
	    let localctx = new NullExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CypherParser.RULE_nullExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 541;
	        this.match(CypherParser.IS);
	        this.state = 543;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===67) {
	            this.state = 542;
	            this.match(CypherParser.NOT);
	        }

	        this.state = 545;
	        this.match(CypherParser.NULL_W);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyOrLabelExpression() {
	    let localctx = new PropertyOrLabelExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CypherParser.RULE_propertyOrLabelExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 547;
	        this.propertyExpression();
	        this.state = 549;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 548;
	            this.nodeLabels();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyExpression() {
	    let localctx = new PropertyExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CypherParser.RULE_propertyExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 551;
	        this.atom();
	        this.state = 556;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 552;
	            this.match(CypherParser.DOT);
	            this.state = 553;
	            this.name();
	            this.state = 558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternPart() {
	    let localctx = new PatternPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CypherParser.RULE_patternPart);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 562;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 63) !== 0) || _la===89 || _la===90) {
	            this.state = 559;
	            this.symbol();
	            this.state = 560;
	            this.match(CypherParser.ASSIGN);
	        }

	        this.state = 564;
	        this.patternElem();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternElem() {
	    let localctx = new PatternElemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CypherParser.RULE_patternElem);
	    var _la = 0;
	    try {
	        this.state = 577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 566;
	            this.nodePattern();
	            this.state = 570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===6 || _la===18) {
	                this.state = 567;
	                this.patternElemChain();
	                this.state = 572;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 573;
	            this.match(CypherParser.LPAREN);
	            this.state = 574;
	            this.patternElem();
	            this.state = 575;
	            this.match(CypherParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternElemChain() {
	    let localctx = new PatternElemChainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CypherParser.RULE_patternElemChain);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 579;
	        this.relationshipPattern();
	        this.state = 580;
	        this.nodePattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	properties() {
	    let localctx = new PropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CypherParser.RULE_properties);
	    try {
	        this.state = 584;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 582;
	            this.mapLit();
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 583;
	            this.parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodePattern() {
	    let localctx = new NodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CypherParser.RULE_nodePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 586;
	        this.match(CypherParser.LPAREN);
	        this.state = 588;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 63) !== 0) || _la===89 || _la===90) {
	            this.state = 587;
	            this.symbol();
	        }

	        this.state = 591;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 590;
	            this.nodeLabels();
	        }

	        this.state = 594;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14 || _la===27) {
	            this.state = 593;
	            this.properties();
	        }

	        this.state = 596;
	        this.match(CypherParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CypherParser.RULE_atom);
	    try {
	        this.state = 610;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 598;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 599;
	            this.parameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 600;
	            this.caseExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 601;
	            this.countAll();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 602;
	            this.listComprehension();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 603;
	            this.patternComprehension();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 604;
	            this.filterWith();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 605;
	            this.relationshipsChainPattern();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 606;
	            this.parenthesizedExpression();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 607;
	            this.functionInvocation();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 608;
	            this.symbol();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 609;
	            this.subqueryExist();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lhs() {
	    let localctx = new LhsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CypherParser.RULE_lhs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 612;
	        this.symbol();
	        this.state = 613;
	        this.match(CypherParser.ASSIGN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipPattern() {
	    let localctx = new RelationshipPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CypherParser.RULE_relationshipPattern);
	    var _la = 0;
	    try {
	        this.state = 632;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 615;
	            this.match(CypherParser.LT);
	            this.state = 616;
	            this.match(CypherParser.SUB);
	            this.state = 618;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 617;
	                this.relationDetail();
	            }

	            this.state = 620;
	            this.match(CypherParser.SUB);
	            this.state = 622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 621;
	                this.match(CypherParser.GT);
	            }

	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 624;
	            this.match(CypherParser.SUB);
	            this.state = 626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 625;
	                this.relationDetail();
	            }

	            this.state = 628;
	            this.match(CypherParser.SUB);
	            this.state = 630;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 629;
	                this.match(CypherParser.GT);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationDetail() {
	    let localctx = new RelationDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CypherParser.RULE_relationDetail);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634;
	        this.match(CypherParser.LBRACK);
	        this.state = 636;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 63) !== 0) || _la===89 || _la===90) {
	            this.state = 635;
	            this.symbol();
	        }

	        this.state = 639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 638;
	            this.relationshipTypes();
	        }

	        this.state = 642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===23) {
	            this.state = 641;
	            this.rangeLit();
	        }

	        this.state = 645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14 || _la===27) {
	            this.state = 644;
	            this.properties();
	        }

	        this.state = 647;
	        this.match(CypherParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipTypes() {
	    let localctx = new RelationshipTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CypherParser.RULE_relationshipTypes);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 649;
	        this.match(CypherParser.COLON);
	        this.state = 650;
	        this.name();
	        this.state = 658;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 651;
	            this.match(CypherParser.STICK);
	            this.state = 653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 652;
	                this.match(CypherParser.COLON);
	            }

	            this.state = 655;
	            this.name();
	            this.state = 660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionSt() {
	    let localctx = new UnionStContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CypherParser.RULE_unionSt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 661;
	        this.match(CypherParser.UNION);
	        this.state = 663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 662;
	            this.match(CypherParser.ALL);
	        }

	        this.state = 665;
	        this.singleQuery();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subqueryExist() {
	    let localctx = new SubqueryExistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CypherParser.RULE_subqueryExist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 667;
	        this.match(CypherParser.EXISTS);
	        this.state = 668;
	        this.match(CypherParser.LBRACE);
	        this.state = 671;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	        case 40:
	        case 41:
	        case 44:
	        case 47:
	        case 48:
	        case 50:
	        case 52:
	        case 53:
	        case 54:
	        case 57:
	        case 59:
	            this.state = 669;
	            this.regularQuery();
	            break;
	        case 12:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 89:
	        case 90:
	            this.state = 670;
	            this.patternWhere();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 673;
	        this.match(CypherParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invocationName() {
	    let localctx = new InvocationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CypherParser.RULE_invocationName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 675;
	        this.symbol();
	        this.state = 680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 676;
	            this.match(CypherParser.DOT);
	            this.state = 677;
	            this.symbol();
	            this.state = 682;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionInvocation() {
	    let localctx = new FunctionInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CypherParser.RULE_functionInvocation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 683;
	        this.invocationName();
	        this.state = 684;
	        this.match(CypherParser.LPAREN);
	        this.state = 686;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===63) {
	            this.state = 685;
	            this.match(CypherParser.DISTINCT);
	        }

	        this.state = 689;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356315648) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 8223) !== 0) || ((((_la - 67)) & ~0x1f) === 0 && ((1 << (_la - 67)) & 130027633) !== 0)) {
	            this.state = 688;
	            this.expressionChain();
	        }

	        this.state = 691;
	        this.match(CypherParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedExpression() {
	    let localctx = new ParenthesizedExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CypherParser.RULE_parenthesizedExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 693;
	        this.match(CypherParser.LPAREN);
	        this.state = 694;
	        this.expression();
	        this.state = 695;
	        this.match(CypherParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterWith() {
	    let localctx = new FilterWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CypherParser.RULE_filterWith);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 697;
	        _la = this._input.LA(1);
	        if(!(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 698;
	        this.match(CypherParser.LPAREN);
	        this.state = 699;
	        this.filterExpression();
	        this.state = 700;
	        this.match(CypherParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternComprehension() {
	    let localctx = new PatternComprehensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CypherParser.RULE_patternComprehension);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 702;
	        this.match(CypherParser.LBRACK);
	        this.state = 704;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 63) !== 0) || _la===89 || _la===90) {
	            this.state = 703;
	            this.lhs();
	        }

	        this.state = 706;
	        this.relationshipsChainPattern();
	        this.state = 708;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 707;
	            this.where();
	        }

	        this.state = 710;
	        this.match(CypherParser.STICK);
	        this.state = 711;
	        this.expression();
	        this.state = 712;
	        this.match(CypherParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationshipsChainPattern() {
	    let localctx = new RelationshipsChainPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CypherParser.RULE_relationshipsChainPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 714;
	        this.nodePattern();
	        this.state = 716; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 715;
	        		this.patternElemChain();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 718; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,86, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listComprehension() {
	    let localctx = new ListComprehensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CypherParser.RULE_listComprehension);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 720;
	        this.match(CypherParser.LBRACK);
	        this.state = 721;
	        this.filterExpression();
	        this.state = 724;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 722;
	            this.match(CypherParser.STICK);
	            this.state = 723;
	            this.expression();
	        }

	        this.state = 726;
	        this.match(CypherParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterExpression() {
	    let localctx = new FilterExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CypherParser.RULE_filterExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 728;
	        this.symbol();
	        this.state = 729;
	        this.match(CypherParser.IN);
	        this.state = 730;
	        this.expression();
	        this.state = 732;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 731;
	            this.where();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countAll() {
	    let localctx = new CountAllContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CypherParser.RULE_countAll);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 734;
	        this.match(CypherParser.COUNT);
	        this.state = 735;
	        this.match(CypherParser.LPAREN);
	        this.state = 736;
	        this.match(CypherParser.MULT);
	        this.state = 737;
	        this.match(CypherParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionChain() {
	    let localctx = new ExpressionChainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CypherParser.RULE_expressionChain);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        this.expression();
	        this.state = 744;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11) {
	            this.state = 740;
	            this.match(CypherParser.COMMA);
	            this.state = 741;
	            this.expression();
	            this.state = 746;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseExpression() {
	    let localctx = new CaseExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CypherParser.RULE_caseExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 747;
	        this.match(CypherParser.CASE);
	        this.state = 749;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356315648) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 8223) !== 0) || ((((_la - 67)) & ~0x1f) === 0 && ((1 << (_la - 67)) & 130027633) !== 0)) {
	            this.state = 748;
	            this.expression();
	        }

	        this.state = 756; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 751;
	            this.match(CypherParser.WHEN);
	            this.state = 752;
	            this.expression();
	            this.state = 753;
	            this.match(CypherParser.THEN);
	            this.state = 754;
	            this.expression();
	            this.state = 758; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===80);
	        this.state = 762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===82) {
	            this.state = 760;
	            this.match(CypherParser.ELSE);
	            this.state = 761;
	            this.expression();
	        }

	        this.state = 764;
	        this.match(CypherParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CypherParser.RULE_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 766;
	        this.match(CypherParser.DOLLAR);
	        this.state = 769;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 89:
	        case 90:
	            this.state = 767;
	            this.symbol();
	            break;
	        case 93:
	            this.state = 768;
	            this.numLit();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CypherParser.RULE_literal);
	    try {
	        this.state = 778;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 71:
	        case 72:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 771;
	            this.boolLit();
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 772;
	            this.numLit();
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 773;
	            this.match(CypherParser.NULL_W);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 774;
	            this.stringLit();
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 775;
	            this.charLit();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 776;
	            this.listLit();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 777;
	            this.mapLit();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangeLit() {
	    let localctx = new RangeLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CypherParser.RULE_rangeLit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        this.match(CypherParser.MULT);
	        this.state = 782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===93) {
	            this.state = 781;
	            this.numLit();
	        }

	        this.state = 788;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8) {
	            this.state = 784;
	            this.match(CypherParser.RANGE);
	            this.state = 786;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===93) {
	                this.state = 785;
	                this.numLit();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolLit() {
	    let localctx = new BoolLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CypherParser.RULE_boolLit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 790;
	        _la = this._input.LA(1);
	        if(!(_la===71 || _la===72)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numLit() {
	    let localctx = new NumLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CypherParser.RULE_numLit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 792;
	        this.match(CypherParser.DIGIT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLit() {
	    let localctx = new StringLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CypherParser.RULE_stringLit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 794;
	        this.match(CypherParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charLit() {
	    let localctx = new CharLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CypherParser.RULE_charLit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 796;
	        this.match(CypherParser.CHAR_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listLit() {
	    let localctx = new ListLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CypherParser.RULE_listLit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 798;
	        this.match(CypherParser.LBRACK);
	        this.state = 800;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356315648) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 8223) !== 0) || ((((_la - 67)) & ~0x1f) === 0 && ((1 << (_la - 67)) & 130027633) !== 0)) {
	            this.state = 799;
	            this.expressionChain();
	        }

	        this.state = 802;
	        this.match(CypherParser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapLit() {
	    let localctx = new MapLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CypherParser.RULE_mapLit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 804;
	        this.match(CypherParser.LBRACE);
	        this.state = 813;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 4294967295) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 536870911) !== 0)) {
	            this.state = 805;
	            this.mapPair();
	            this.state = 810;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===11) {
	                this.state = 806;
	                this.match(CypherParser.COMMA);
	                this.state = 807;
	                this.mapPair();
	                this.state = 812;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 815;
	        this.match(CypherParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapPair() {
	    let localctx = new MapPairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CypherParser.RULE_mapPair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 817;
	        this.name();
	        this.state = 818;
	        this.match(CypherParser.COLON);
	        this.state = 819;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CypherParser.RULE_name);
	    try {
	        this.state = 823;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 89:
	        case 90:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 821;
	            this.symbol();
	            break;
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 822;
	            this.reservedWord();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbol() {
	    let localctx = new SymbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CypherParser.RULE_symbol);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 825;
	        _la = this._input.LA(1);
	        if(!(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 63) !== 0) || _la===89 || _la===90)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedWord() {
	    let localctx = new ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CypherParser.RULE_reservedWord);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 827;
	        _la = this._input.LA(1);
	        if(!(((((_la - 36)) & ~0x1f) === 0 && ((1 << (_la - 36)) & 4294967295) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 2097151) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CypherParser.EOF = antlr4.Token.EOF;
CypherParser.ASSIGN = 1;
CypherParser.ADD_ASSIGN = 2;
CypherParser.LE = 3;
CypherParser.GE = 4;
CypherParser.GT = 5;
CypherParser.LT = 6;
CypherParser.NOT_EQUAL = 7;
CypherParser.RANGE = 8;
CypherParser.SEMI = 9;
CypherParser.DOT = 10;
CypherParser.COMMA = 11;
CypherParser.LPAREN = 12;
CypherParser.RPAREN = 13;
CypherParser.LBRACE = 14;
CypherParser.RBRACE = 15;
CypherParser.LBRACK = 16;
CypherParser.RBRACK = 17;
CypherParser.SUB = 18;
CypherParser.PLUS = 19;
CypherParser.DIV = 20;
CypherParser.MOD = 21;
CypherParser.CARET = 22;
CypherParser.MULT = 23;
CypherParser.ESC = 24;
CypherParser.COLON = 25;
CypherParser.STICK = 26;
CypherParser.DOLLAR = 27;
CypherParser.CALL = 28;
CypherParser.YIELD = 29;
CypherParser.FILTER = 30;
CypherParser.EXTRACT = 31;
CypherParser.COUNT = 32;
CypherParser.ANY = 33;
CypherParser.NONE = 34;
CypherParser.SINGLE = 35;
CypherParser.ALL = 36;
CypherParser.ASC = 37;
CypherParser.ASCENDING = 38;
CypherParser.BY = 39;
CypherParser.CREATE = 40;
CypherParser.DELETE = 41;
CypherParser.DESC = 42;
CypherParser.DESCENDING = 43;
CypherParser.DETACH = 44;
CypherParser.EXISTS = 45;
CypherParser.LIMIT = 46;
CypherParser.MATCH = 47;
CypherParser.MERGE = 48;
CypherParser.ON = 49;
CypherParser.OPTIONAL = 50;
CypherParser.ORDER = 51;
CypherParser.REMOVE = 52;
CypherParser.RETURN = 53;
CypherParser.SET = 54;
CypherParser.SKIP_W = 55;
CypherParser.WHERE = 56;
CypherParser.WITH = 57;
CypherParser.UNION = 58;
CypherParser.UNWIND = 59;
CypherParser.AND = 60;
CypherParser.AS = 61;
CypherParser.CONTAINS = 62;
CypherParser.DISTINCT = 63;
CypherParser.ENDS = 64;
CypherParser.IN = 65;
CypherParser.IS = 66;
CypherParser.NOT = 67;
CypherParser.OR = 68;
CypherParser.STARTS = 69;
CypherParser.XOR = 70;
CypherParser.FALSE = 71;
CypherParser.TRUE = 72;
CypherParser.NULL_W = 73;
CypherParser.CONSTRAINT = 74;
CypherParser.DO = 75;
CypherParser.FOR = 76;
CypherParser.REQUIRE = 77;
CypherParser.UNIQUE = 78;
CypherParser.CASE = 79;
CypherParser.WHEN = 80;
CypherParser.THEN = 81;
CypherParser.ELSE = 82;
CypherParser.END = 83;
CypherParser.MANDATORY = 84;
CypherParser.SCALAR = 85;
CypherParser.OF = 86;
CypherParser.ADD = 87;
CypherParser.DROP = 88;
CypherParser.ID = 89;
CypherParser.ESC_LITERAL = 90;
CypherParser.CHAR_LITERAL = 91;
CypherParser.STRING_LITERAL = 92;
CypherParser.DIGIT = 93;
CypherParser.FLOAT = 94;
CypherParser.WS = 95;
CypherParser.COMMENT = 96;
CypherParser.LINE_COMMENT = 97;
CypherParser.ERRCHAR = 98;
CypherParser.Letter = 99;

CypherParser.RULE_script = 0;
CypherParser.RULE_query = 1;
CypherParser.RULE_regularQuery = 2;
CypherParser.RULE_singleQuery = 3;
CypherParser.RULE_standaloneCall = 4;
CypherParser.RULE_returnSt = 5;
CypherParser.RULE_withSt = 6;
CypherParser.RULE_skipSt = 7;
CypherParser.RULE_limitSt = 8;
CypherParser.RULE_projectionBody = 9;
CypherParser.RULE_projectionItems = 10;
CypherParser.RULE_projectionItem = 11;
CypherParser.RULE_orderItem = 12;
CypherParser.RULE_orderSt = 13;
CypherParser.RULE_singlePartQ = 14;
CypherParser.RULE_multiPartQ = 15;
CypherParser.RULE_matchSt = 16;
CypherParser.RULE_unwindSt = 17;
CypherParser.RULE_readingStatement = 18;
CypherParser.RULE_updatingStatement = 19;
CypherParser.RULE_deleteSt = 20;
CypherParser.RULE_removeSt = 21;
CypherParser.RULE_removeItem = 22;
CypherParser.RULE_queryCallSt = 23;
CypherParser.RULE_parenExpressionChain = 24;
CypherParser.RULE_yieldItems = 25;
CypherParser.RULE_yieldItem = 26;
CypherParser.RULE_mergeSt = 27;
CypherParser.RULE_mergeAction = 28;
CypherParser.RULE_setSt = 29;
CypherParser.RULE_setItem = 30;
CypherParser.RULE_nodeLabels = 31;
CypherParser.RULE_createSt = 32;
CypherParser.RULE_patternWhere = 33;
CypherParser.RULE_where = 34;
CypherParser.RULE_pattern = 35;
CypherParser.RULE_expression = 36;
CypherParser.RULE_xorExpression = 37;
CypherParser.RULE_andExpression = 38;
CypherParser.RULE_notExpression = 39;
CypherParser.RULE_comparisonExpression = 40;
CypherParser.RULE_comparisonSigns = 41;
CypherParser.RULE_addSubExpression = 42;
CypherParser.RULE_multDivExpression = 43;
CypherParser.RULE_powerExpression = 44;
CypherParser.RULE_unaryAddSubExpression = 45;
CypherParser.RULE_atomicExpression = 46;
CypherParser.RULE_listExpression = 47;
CypherParser.RULE_stringExpression = 48;
CypherParser.RULE_stringExpPrefix = 49;
CypherParser.RULE_nullExpression = 50;
CypherParser.RULE_propertyOrLabelExpression = 51;
CypherParser.RULE_propertyExpression = 52;
CypherParser.RULE_patternPart = 53;
CypherParser.RULE_patternElem = 54;
CypherParser.RULE_patternElemChain = 55;
CypherParser.RULE_properties = 56;
CypherParser.RULE_nodePattern = 57;
CypherParser.RULE_atom = 58;
CypherParser.RULE_lhs = 59;
CypherParser.RULE_relationshipPattern = 60;
CypherParser.RULE_relationDetail = 61;
CypherParser.RULE_relationshipTypes = 62;
CypherParser.RULE_unionSt = 63;
CypherParser.RULE_subqueryExist = 64;
CypherParser.RULE_invocationName = 65;
CypherParser.RULE_functionInvocation = 66;
CypherParser.RULE_parenthesizedExpression = 67;
CypherParser.RULE_filterWith = 68;
CypherParser.RULE_patternComprehension = 69;
CypherParser.RULE_relationshipsChainPattern = 70;
CypherParser.RULE_listComprehension = 71;
CypherParser.RULE_filterExpression = 72;
CypherParser.RULE_countAll = 73;
CypherParser.RULE_expressionChain = 74;
CypherParser.RULE_caseExpression = 75;
CypherParser.RULE_parameter = 76;
CypherParser.RULE_literal = 77;
CypherParser.RULE_rangeLit = 78;
CypherParser.RULE_boolLit = 79;
CypherParser.RULE_numLit = 80;
CypherParser.RULE_stringLit = 81;
CypherParser.RULE_charLit = 82;
CypherParser.RULE_listLit = 83;
CypherParser.RULE_mapLit = 84;
CypherParser.RULE_mapPair = 85;
CypherParser.RULE_name = 86;
CypherParser.RULE_symbol = 87;
CypherParser.RULE_reservedWord = 88;

class ScriptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_script;
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	EOF() {
	    return this.getToken(CypherParser.EOF, 0);
	};

	SEMI() {
	    return this.getToken(CypherParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterScript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitScript(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitScript(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_query;
    }

	regularQuery() {
	    return this.getTypedRuleContext(RegularQueryContext,0);
	};

	standaloneCall() {
	    return this.getTypedRuleContext(StandaloneCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RegularQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_regularQuery;
    }

	singleQuery() {
	    return this.getTypedRuleContext(SingleQueryContext,0);
	};

	unionSt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionStContext);
	    } else {
	        return this.getTypedRuleContext(UnionStContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterRegularQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitRegularQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitRegularQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_singleQuery;
    }

	singlePartQ() {
	    return this.getTypedRuleContext(SinglePartQContext,0);
	};

	multiPartQ() {
	    return this.getTypedRuleContext(MultiPartQContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterSingleQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitSingleQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitSingleQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StandaloneCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_standaloneCall;
    }

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	invocationName() {
	    return this.getTypedRuleContext(InvocationNameContext,0);
	};

	parenExpressionChain() {
	    return this.getTypedRuleContext(ParenExpressionChainContext,0);
	};

	YIELD() {
	    return this.getToken(CypherParser.YIELD, 0);
	};

	MULT() {
	    return this.getToken(CypherParser.MULT, 0);
	};

	yieldItems() {
	    return this.getTypedRuleContext(YieldItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterStandaloneCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitStandaloneCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitStandaloneCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_returnSt;
    }

	RETURN() {
	    return this.getToken(CypherParser.RETURN, 0);
	};

	projectionBody() {
	    return this.getTypedRuleContext(ProjectionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterReturnSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitReturnSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitReturnSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_withSt;
    }

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	projectionBody() {
	    return this.getTypedRuleContext(ProjectionBodyContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterWithSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitWithSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitWithSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkipStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_skipSt;
    }

	SKIP_W() {
	    return this.getToken(CypherParser.SKIP_W, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterSkipSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitSkipSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitSkipSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_limitSt;
    }

	LIMIT() {
	    return this.getToken(CypherParser.LIMIT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterLimitSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitLimitSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitLimitSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProjectionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_projectionBody;
    }

	projectionItems() {
	    return this.getTypedRuleContext(ProjectionItemsContext,0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	orderSt() {
	    return this.getTypedRuleContext(OrderStContext,0);
	};

	skipSt() {
	    return this.getTypedRuleContext(SkipStContext,0);
	};

	limitSt() {
	    return this.getTypedRuleContext(LimitStContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterProjectionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitProjectionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitProjectionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProjectionItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_projectionItems;
    }

	MULT() {
	    return this.getToken(CypherParser.MULT, 0);
	};

	projectionItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProjectionItemContext);
	    } else {
	        return this.getTypedRuleContext(ProjectionItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.COMMA);
	    } else {
	        return this.getToken(CypherParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterProjectionItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitProjectionItems(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitProjectionItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProjectionItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_projectionItem;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterProjectionItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitProjectionItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitProjectionItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_orderItem;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASCENDING() {
	    return this.getToken(CypherParser.ASCENDING, 0);
	};

	ASC() {
	    return this.getToken(CypherParser.ASC, 0);
	};

	DESCENDING() {
	    return this.getToken(CypherParser.DESCENDING, 0);
	};

	DESC() {
	    return this.getToken(CypherParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterOrderItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitOrderItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitOrderItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_orderSt;
    }

	ORDER() {
	    return this.getToken(CypherParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(CypherParser.BY, 0);
	};

	orderItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderItemContext);
	    } else {
	        return this.getTypedRuleContext(OrderItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.COMMA);
	    } else {
	        return this.getToken(CypherParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterOrderSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitOrderSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitOrderSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SinglePartQContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_singlePartQ;
    }

	returnSt() {
	    return this.getTypedRuleContext(ReturnStContext,0);
	};

	readingStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReadingStatementContext);
	    } else {
	        return this.getTypedRuleContext(ReadingStatementContext,i);
	    }
	};

	updatingStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatingStatementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatingStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterSinglePartQ(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitSinglePartQ(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitSinglePartQ(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiPartQContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_multiPartQ;
    }

	singlePartQ() {
	    return this.getTypedRuleContext(SinglePartQContext,0);
	};

	readingStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReadingStatementContext);
	    } else {
	        return this.getTypedRuleContext(ReadingStatementContext,i);
	    }
	};

	withSt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WithStContext);
	    } else {
	        return this.getTypedRuleContext(WithStContext,i);
	    }
	};

	updatingStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatingStatementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatingStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterMultiPartQ(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitMultiPartQ(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitMultiPartQ(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_matchSt;
    }

	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	patternWhere() {
	    return this.getTypedRuleContext(PatternWhereContext,0);
	};

	OPTIONAL() {
	    return this.getToken(CypherParser.OPTIONAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterMatchSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitMatchSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitMatchSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnwindStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_unwindSt;
    }

	UNWIND() {
	    return this.getToken(CypherParser.UNWIND, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterUnwindSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitUnwindSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitUnwindSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReadingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_readingStatement;
    }

	matchSt() {
	    return this.getTypedRuleContext(MatchStContext,0);
	};

	unwindSt() {
	    return this.getTypedRuleContext(UnwindStContext,0);
	};

	queryCallSt() {
	    return this.getTypedRuleContext(QueryCallStContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterReadingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitReadingStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitReadingStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpdatingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_updatingStatement;
    }

	createSt() {
	    return this.getTypedRuleContext(CreateStContext,0);
	};

	mergeSt() {
	    return this.getTypedRuleContext(MergeStContext,0);
	};

	deleteSt() {
	    return this.getTypedRuleContext(DeleteStContext,0);
	};

	setSt() {
	    return this.getTypedRuleContext(SetStContext,0);
	};

	removeSt() {
	    return this.getTypedRuleContext(RemoveStContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterUpdatingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitUpdatingStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitUpdatingStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_deleteSt;
    }

	DELETE() {
	    return this.getToken(CypherParser.DELETE, 0);
	};

	expressionChain() {
	    return this.getTypedRuleContext(ExpressionChainContext,0);
	};

	DETACH() {
	    return this.getToken(CypherParser.DETACH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterDeleteSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitDeleteSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitDeleteSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemoveStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_removeSt;
    }

	REMOVE() {
	    return this.getToken(CypherParser.REMOVE, 0);
	};

	removeItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RemoveItemContext);
	    } else {
	        return this.getTypedRuleContext(RemoveItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.COMMA);
	    } else {
	        return this.getToken(CypherParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterRemoveSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitRemoveSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitRemoveSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemoveItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_removeItem;
    }

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	nodeLabels() {
	    return this.getTypedRuleContext(NodeLabelsContext,0);
	};

	propertyExpression() {
	    return this.getTypedRuleContext(PropertyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterRemoveItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitRemoveItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitRemoveItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryCallStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_queryCallSt;
    }

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	invocationName() {
	    return this.getTypedRuleContext(InvocationNameContext,0);
	};

	parenExpressionChain() {
	    return this.getTypedRuleContext(ParenExpressionChainContext,0);
	};

	YIELD() {
	    return this.getToken(CypherParser.YIELD, 0);
	};

	yieldItems() {
	    return this.getTypedRuleContext(YieldItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterQueryCallSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitQueryCallSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitQueryCallSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParenExpressionChainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_parenExpressionChain;
    }

	LPAREN() {
	    return this.getToken(CypherParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CypherParser.RPAREN, 0);
	};

	expressionChain() {
	    return this.getTypedRuleContext(ExpressionChainContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterParenExpressionChain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitParenExpressionChain(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitParenExpressionChain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_yieldItems;
    }

	yieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(YieldItemContext);
	    } else {
	        return this.getTypedRuleContext(YieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.COMMA);
	    } else {
	        return this.getToken(CypherParser.COMMA, i);
	    }
	};


	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterYieldItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitYieldItems(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitYieldItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_yieldItem;
    }

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterYieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitYieldItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitYieldItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_mergeSt;
    }

	MERGE() {
	    return this.getToken(CypherParser.MERGE, 0);
	};

	patternPart() {
	    return this.getTypedRuleContext(PatternPartContext,0);
	};

	mergeAction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MergeActionContext);
	    } else {
	        return this.getTypedRuleContext(MergeActionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterMergeSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitMergeSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitMergeSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_mergeAction;
    }

	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	setSt() {
	    return this.getTypedRuleContext(SetStContext,0);
	};

	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterMergeAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitMergeAction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitMergeAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_setSt;
    }

	SET() {
	    return this.getToken(CypherParser.SET, 0);
	};

	setItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetItemContext);
	    } else {
	        return this.getTypedRuleContext(SetItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.COMMA);
	    } else {
	        return this.getToken(CypherParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterSetSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitSetSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitSetSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_setItem;
    }

	propertyExpression() {
	    return this.getTypedRuleContext(PropertyExpressionContext,0);
	};

	ASSIGN() {
	    return this.getToken(CypherParser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ADD_ASSIGN() {
	    return this.getToken(CypherParser.ADD_ASSIGN, 0);
	};

	nodeLabels() {
	    return this.getTypedRuleContext(NodeLabelsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterSetItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitSetItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitSetItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeLabelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_nodeLabels;
    }

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.COLON);
	    } else {
	        return this.getToken(CypherParser.COLON, i);
	    }
	};


	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterNodeLabels(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitNodeLabels(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitNodeLabels(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_createSt;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterCreateSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitCreateSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitCreateSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternWhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_patternWhere;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterPatternWhere(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitPatternWhere(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitPatternWhere(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_where;
    }

	WHERE() {
	    return this.getToken(CypherParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterWhere(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitWhere(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitWhere(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_pattern;
    }

	patternPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternPartContext);
	    } else {
	        return this.getTypedRuleContext(PatternPartContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.COMMA);
	    } else {
	        return this.getToken(CypherParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_expression;
    }

	xorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(XorExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.OR);
	    } else {
	        return this.getToken(CypherParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_xorExpression;
    }

	andExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AndExpressionContext,i);
	    }
	};

	XOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.XOR);
	    } else {
	        return this.getToken(CypherParser.XOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitXorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitXorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_andExpression;
    }

	notExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NotExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NotExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.AND);
	    } else {
	        return this.getToken(CypherParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NotExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_notExpression;
    }

	comparisonExpression() {
	    return this.getTypedRuleContext(ComparisonExpressionContext,0);
	};

	NOT() {
	    return this.getToken(CypherParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_comparisonExpression;
    }

	addSubExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddSubExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AddSubExpressionContext,i);
	    }
	};

	comparisonSigns = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComparisonSignsContext);
	    } else {
	        return this.getTypedRuleContext(ComparisonSignsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterComparisonExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitComparisonExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitComparisonExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonSignsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_comparisonSigns;
    }

	ASSIGN() {
	    return this.getToken(CypherParser.ASSIGN, 0);
	};

	LE() {
	    return this.getToken(CypherParser.LE, 0);
	};

	GE() {
	    return this.getToken(CypherParser.GE, 0);
	};

	GT() {
	    return this.getToken(CypherParser.GT, 0);
	};

	LT() {
	    return this.getToken(CypherParser.LT, 0);
	};

	NOT_EQUAL() {
	    return this.getToken(CypherParser.NOT_EQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterComparisonSigns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitComparisonSigns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitComparisonSigns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AddSubExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_addSubExpression;
    }

	multDivExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultDivExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultDivExpressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.PLUS);
	    } else {
	        return this.getToken(CypherParser.PLUS, i);
	    }
	};


	SUB = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SUB);
	    } else {
	        return this.getToken(CypherParser.SUB, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterAddSubExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitAddSubExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitAddSubExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultDivExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_multDivExpression;
    }

	powerExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PowerExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PowerExpressionContext,i);
	    }
	};

	MULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.MULT);
	    } else {
	        return this.getToken(CypherParser.MULT, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.DIV);
	    } else {
	        return this.getToken(CypherParser.DIV, i);
	    }
	};


	MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.MOD);
	    } else {
	        return this.getToken(CypherParser.MOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterMultDivExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitMultDivExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitMultDivExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PowerExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_powerExpression;
    }

	unaryAddSubExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryAddSubExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryAddSubExpressionContext,i);
	    }
	};

	CARET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.CARET);
	    } else {
	        return this.getToken(CypherParser.CARET, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterPowerExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitPowerExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitPowerExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnaryAddSubExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_unaryAddSubExpression;
    }

	atomicExpression() {
	    return this.getTypedRuleContext(AtomicExpressionContext,0);
	};

	PLUS() {
	    return this.getToken(CypherParser.PLUS, 0);
	};

	SUB() {
	    return this.getToken(CypherParser.SUB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterUnaryAddSubExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitUnaryAddSubExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitUnaryAddSubExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtomicExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_atomicExpression;
    }

	propertyOrLabelExpression() {
	    return this.getTypedRuleContext(PropertyOrLabelExpressionContext,0);
	};

	stringExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StringExpressionContext,i);
	    }
	};

	listExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ListExpressionContext,i);
	    }
	};

	nullExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NullExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NullExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterAtomicExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitAtomicExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitAtomicExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_listExpression;
    }

	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	propertyOrLabelExpression() {
	    return this.getTypedRuleContext(PropertyOrLabelExpressionContext,0);
	};

	LBRACK() {
	    return this.getToken(CypherParser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(CypherParser.RBRACK, 0);
	};

	RANGE() {
	    return this.getToken(CypherParser.RANGE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterListExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitListExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitListExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_stringExpression;
    }

	stringExpPrefix() {
	    return this.getTypedRuleContext(StringExpPrefixContext,0);
	};

	propertyOrLabelExpression() {
	    return this.getTypedRuleContext(PropertyOrLabelExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterStringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitStringExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitStringExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringExpPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_stringExpPrefix;
    }

	STARTS() {
	    return this.getToken(CypherParser.STARTS, 0);
	};

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	ENDS() {
	    return this.getToken(CypherParser.ENDS, 0);
	};

	CONTAINS() {
	    return this.getToken(CypherParser.CONTAINS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterStringExpPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitStringExpPrefix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitStringExpPrefix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_nullExpression;
    }

	IS() {
	    return this.getToken(CypherParser.IS, 0);
	};

	NULL_W() {
	    return this.getToken(CypherParser.NULL_W, 0);
	};

	NOT() {
	    return this.getToken(CypherParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterNullExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitNullExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitNullExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyOrLabelExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_propertyOrLabelExpression;
    }

	propertyExpression() {
	    return this.getTypedRuleContext(PropertyExpressionContext,0);
	};

	nodeLabels() {
	    return this.getTypedRuleContext(NodeLabelsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterPropertyOrLabelExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitPropertyOrLabelExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitPropertyOrLabelExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_propertyExpression;
    }

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.DOT);
	    } else {
	        return this.getToken(CypherParser.DOT, i);
	    }
	};


	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterPropertyExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitPropertyExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitPropertyExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_patternPart;
    }

	patternElem() {
	    return this.getTypedRuleContext(PatternElemContext,0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ASSIGN() {
	    return this.getToken(CypherParser.ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterPatternPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitPatternPart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitPatternPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternElemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_patternElem;
    }

	nodePattern() {
	    return this.getTypedRuleContext(NodePatternContext,0);
	};

	patternElemChain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternElemChainContext);
	    } else {
	        return this.getTypedRuleContext(PatternElemChainContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(CypherParser.LPAREN, 0);
	};

	patternElem() {
	    return this.getTypedRuleContext(PatternElemContext,0);
	};

	RPAREN() {
	    return this.getToken(CypherParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterPatternElem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitPatternElem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitPatternElem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternElemChainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_patternElemChain;
    }

	relationshipPattern() {
	    return this.getTypedRuleContext(RelationshipPatternContext,0);
	};

	nodePattern() {
	    return this.getTypedRuleContext(NodePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterPatternElemChain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitPatternElemChain(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitPatternElemChain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_properties;
    }

	mapLit() {
	    return this.getTypedRuleContext(MapLitContext,0);
	};

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_nodePattern;
    }

	LPAREN() {
	    return this.getToken(CypherParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CypherParser.RPAREN, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	nodeLabels() {
	    return this.getTypedRuleContext(NodeLabelsContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterNodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitNodePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitNodePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_atom;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	caseExpression() {
	    return this.getTypedRuleContext(CaseExpressionContext,0);
	};

	countAll() {
	    return this.getTypedRuleContext(CountAllContext,0);
	};

	listComprehension() {
	    return this.getTypedRuleContext(ListComprehensionContext,0);
	};

	patternComprehension() {
	    return this.getTypedRuleContext(PatternComprehensionContext,0);
	};

	filterWith() {
	    return this.getTypedRuleContext(FilterWithContext,0);
	};

	relationshipsChainPattern() {
	    return this.getTypedRuleContext(RelationshipsChainPatternContext,0);
	};

	parenthesizedExpression() {
	    return this.getTypedRuleContext(ParenthesizedExpressionContext,0);
	};

	functionInvocation() {
	    return this.getTypedRuleContext(FunctionInvocationContext,0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	subqueryExist() {
	    return this.getTypedRuleContext(SubqueryExistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LhsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_lhs;
    }

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	ASSIGN() {
	    return this.getToken(CypherParser.ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterLhs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitLhs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitLhs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelationshipPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipPattern;
    }

	LT() {
	    return this.getToken(CypherParser.LT, 0);
	};

	SUB = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SUB);
	    } else {
	        return this.getToken(CypherParser.SUB, i);
	    }
	};


	relationDetail() {
	    return this.getTypedRuleContext(RelationDetailContext,0);
	};

	GT() {
	    return this.getToken(CypherParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterRelationshipPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitRelationshipPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitRelationshipPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelationDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationDetail;
    }

	LBRACK() {
	    return this.getToken(CypherParser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(CypherParser.RBRACK, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	relationshipTypes() {
	    return this.getTypedRuleContext(RelationshipTypesContext,0);
	};

	rangeLit() {
	    return this.getTypedRuleContext(RangeLitContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterRelationDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitRelationDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitRelationDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelationshipTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipTypes;
    }

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.COLON);
	    } else {
	        return this.getToken(CypherParser.COLON, i);
	    }
	};


	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	STICK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.STICK);
	    } else {
	        return this.getToken(CypherParser.STICK, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterRelationshipTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitRelationshipTypes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitRelationshipTypes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnionStContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_unionSt;
    }

	UNION() {
	    return this.getToken(CypherParser.UNION, 0);
	};

	singleQuery() {
	    return this.getTypedRuleContext(SingleQueryContext,0);
	};

	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterUnionSt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitUnionSt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitUnionSt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubqueryExistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_subqueryExist;
    }

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	LBRACE() {
	    return this.getToken(CypherParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CypherParser.RBRACE, 0);
	};

	regularQuery() {
	    return this.getTypedRuleContext(RegularQueryContext,0);
	};

	patternWhere() {
	    return this.getTypedRuleContext(PatternWhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterSubqueryExist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitSubqueryExist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitSubqueryExist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InvocationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_invocationName;
    }

	symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SymbolContext);
	    } else {
	        return this.getTypedRuleContext(SymbolContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.DOT);
	    } else {
	        return this.getToken(CypherParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterInvocationName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitInvocationName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitInvocationName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_functionInvocation;
    }

	invocationName() {
	    return this.getTypedRuleContext(InvocationNameContext,0);
	};

	LPAREN() {
	    return this.getToken(CypherParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(CypherParser.RPAREN, 0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	expressionChain() {
	    return this.getTypedRuleContext(ExpressionChainContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterFunctionInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitFunctionInvocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitFunctionInvocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParenthesizedExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_parenthesizedExpression;
    }

	LPAREN() {
	    return this.getToken(CypherParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(CypherParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitParenthesizedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilterWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_filterWith;
    }

	LPAREN() {
	    return this.getToken(CypherParser.LPAREN, 0);
	};

	filterExpression() {
	    return this.getTypedRuleContext(FilterExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(CypherParser.RPAREN, 0);
	};

	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	ANY() {
	    return this.getToken(CypherParser.ANY, 0);
	};

	NONE() {
	    return this.getToken(CypherParser.NONE, 0);
	};

	SINGLE() {
	    return this.getToken(CypherParser.SINGLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterFilterWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitFilterWith(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitFilterWith(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternComprehensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_patternComprehension;
    }

	LBRACK() {
	    return this.getToken(CypherParser.LBRACK, 0);
	};

	relationshipsChainPattern() {
	    return this.getTypedRuleContext(RelationshipsChainPatternContext,0);
	};

	STICK() {
	    return this.getToken(CypherParser.STICK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RBRACK() {
	    return this.getToken(CypherParser.RBRACK, 0);
	};

	lhs() {
	    return this.getTypedRuleContext(LhsContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterPatternComprehension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitPatternComprehension(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitPatternComprehension(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelationshipsChainPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_relationshipsChainPattern;
    }

	nodePattern() {
	    return this.getTypedRuleContext(NodePatternContext,0);
	};

	patternElemChain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternElemChainContext);
	    } else {
	        return this.getTypedRuleContext(PatternElemChainContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterRelationshipsChainPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitRelationshipsChainPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitRelationshipsChainPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListComprehensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_listComprehension;
    }

	LBRACK() {
	    return this.getToken(CypherParser.LBRACK, 0);
	};

	filterExpression() {
	    return this.getTypedRuleContext(FilterExpressionContext,0);
	};

	RBRACK() {
	    return this.getToken(CypherParser.RBRACK, 0);
	};

	STICK() {
	    return this.getToken(CypherParser.STICK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterListComprehension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitListComprehension(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitListComprehension(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilterExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_filterExpression;
    }

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterFilterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitFilterExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitFilterExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CountAllContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_countAll;
    }

	COUNT() {
	    return this.getToken(CypherParser.COUNT, 0);
	};

	LPAREN() {
	    return this.getToken(CypherParser.LPAREN, 0);
	};

	MULT() {
	    return this.getToken(CypherParser.MULT, 0);
	};

	RPAREN() {
	    return this.getToken(CypherParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterCountAll(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitCountAll(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitCountAll(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionChainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_expressionChain;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.COMMA);
	    } else {
	        return this.getToken(CypherParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterExpressionChain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitExpressionChain(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitExpressionChain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_caseExpression;
    }

	CASE() {
	    return this.getToken(CypherParser.CASE, 0);
	};

	END() {
	    return this.getToken(CypherParser.END, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.WHEN);
	    } else {
	        return this.getToken(CypherParser.WHEN, i);
	    }
	};


	THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.THEN);
	    } else {
	        return this.getToken(CypherParser.THEN, i);
	    }
	};


	ELSE() {
	    return this.getToken(CypherParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterCaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitCaseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitCaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_parameter;
    }

	DOLLAR() {
	    return this.getToken(CypherParser.DOLLAR, 0);
	};

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	numLit() {
	    return this.getTypedRuleContext(NumLitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_literal;
    }

	boolLit() {
	    return this.getTypedRuleContext(BoolLitContext,0);
	};

	numLit() {
	    return this.getTypedRuleContext(NumLitContext,0);
	};

	NULL_W() {
	    return this.getToken(CypherParser.NULL_W, 0);
	};

	stringLit() {
	    return this.getTypedRuleContext(StringLitContext,0);
	};

	charLit() {
	    return this.getTypedRuleContext(CharLitContext,0);
	};

	listLit() {
	    return this.getTypedRuleContext(ListLitContext,0);
	};

	mapLit() {
	    return this.getTypedRuleContext(MapLitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangeLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_rangeLit;
    }

	MULT() {
	    return this.getToken(CypherParser.MULT, 0);
	};

	numLit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumLitContext);
	    } else {
	        return this.getTypedRuleContext(NumLitContext,i);
	    }
	};

	RANGE() {
	    return this.getToken(CypherParser.RANGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterRangeLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitRangeLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitRangeLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BoolLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_boolLit;
    }

	TRUE() {
	    return this.getToken(CypherParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(CypherParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterBoolLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitBoolLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitBoolLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_numLit;
    }

	DIGIT() {
	    return this.getToken(CypherParser.DIGIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterNumLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitNumLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitNumLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_stringLit;
    }

	STRING_LITERAL() {
	    return this.getToken(CypherParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterStringLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitStringLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitStringLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_charLit;
    }

	CHAR_LITERAL() {
	    return this.getToken(CypherParser.CHAR_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterCharLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitCharLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitCharLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_listLit;
    }

	LBRACK() {
	    return this.getToken(CypherParser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(CypherParser.RBRACK, 0);
	};

	expressionChain() {
	    return this.getTypedRuleContext(ExpressionChainContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterListLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitListLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitListLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MapLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_mapLit;
    }

	LBRACE() {
	    return this.getToken(CypherParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(CypherParser.RBRACE, 0);
	};

	mapPair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MapPairContext);
	    } else {
	        return this.getTypedRuleContext(MapPairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.COMMA);
	    } else {
	        return this.getToken(CypherParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterMapLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitMapLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitMapLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MapPairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_mapPair;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	COLON() {
	    return this.getToken(CypherParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterMapPair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitMapPair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitMapPair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_name;
    }

	symbol() {
	    return this.getTypedRuleContext(SymbolContext,0);
	};

	reservedWord() {
	    return this.getTypedRuleContext(ReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SymbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_symbol;
    }

	ESC_LITERAL() {
	    return this.getToken(CypherParser.ESC_LITERAL, 0);
	};

	ID() {
	    return this.getToken(CypherParser.ID, 0);
	};

	COUNT() {
	    return this.getToken(CypherParser.COUNT, 0);
	};

	FILTER() {
	    return this.getToken(CypherParser.FILTER, 0);
	};

	EXTRACT() {
	    return this.getToken(CypherParser.EXTRACT, 0);
	};

	ANY() {
	    return this.getToken(CypherParser.ANY, 0);
	};

	NONE() {
	    return this.getToken(CypherParser.NONE, 0);
	};

	SINGLE() {
	    return this.getToken(CypherParser.SINGLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterSymbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitSymbol(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitSymbol(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_reservedWord;
    }

	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	ASC() {
	    return this.getToken(CypherParser.ASC, 0);
	};

	ASCENDING() {
	    return this.getToken(CypherParser.ASCENDING, 0);
	};

	BY() {
	    return this.getToken(CypherParser.BY, 0);
	};

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	DELETE() {
	    return this.getToken(CypherParser.DELETE, 0);
	};

	DESC() {
	    return this.getToken(CypherParser.DESC, 0);
	};

	DESCENDING() {
	    return this.getToken(CypherParser.DESCENDING, 0);
	};

	DETACH() {
	    return this.getToken(CypherParser.DETACH, 0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	LIMIT() {
	    return this.getToken(CypherParser.LIMIT, 0);
	};

	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	MERGE() {
	    return this.getToken(CypherParser.MERGE, 0);
	};

	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	OPTIONAL() {
	    return this.getToken(CypherParser.OPTIONAL, 0);
	};

	ORDER() {
	    return this.getToken(CypherParser.ORDER, 0);
	};

	REMOVE() {
	    return this.getToken(CypherParser.REMOVE, 0);
	};

	RETURN() {
	    return this.getToken(CypherParser.RETURN, 0);
	};

	SET() {
	    return this.getToken(CypherParser.SET, 0);
	};

	SKIP_W() {
	    return this.getToken(CypherParser.SKIP_W, 0);
	};

	WHERE() {
	    return this.getToken(CypherParser.WHERE, 0);
	};

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	UNION() {
	    return this.getToken(CypherParser.UNION, 0);
	};

	UNWIND() {
	    return this.getToken(CypherParser.UNWIND, 0);
	};

	AND() {
	    return this.getToken(CypherParser.AND, 0);
	};

	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	CONTAINS() {
	    return this.getToken(CypherParser.CONTAINS, 0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	ENDS() {
	    return this.getToken(CypherParser.ENDS, 0);
	};

	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	IS() {
	    return this.getToken(CypherParser.IS, 0);
	};

	NOT() {
	    return this.getToken(CypherParser.NOT, 0);
	};

	OR() {
	    return this.getToken(CypherParser.OR, 0);
	};

	STARTS() {
	    return this.getToken(CypherParser.STARTS, 0);
	};

	XOR() {
	    return this.getToken(CypherParser.XOR, 0);
	};

	FALSE() {
	    return this.getToken(CypherParser.FALSE, 0);
	};

	TRUE() {
	    return this.getToken(CypherParser.TRUE, 0);
	};

	NULL_W() {
	    return this.getToken(CypherParser.NULL_W, 0);
	};

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	DO() {
	    return this.getToken(CypherParser.DO, 0);
	};

	FOR() {
	    return this.getToken(CypherParser.FOR, 0);
	};

	REQUIRE() {
	    return this.getToken(CypherParser.REQUIRE, 0);
	};

	UNIQUE() {
	    return this.getToken(CypherParser.UNIQUE, 0);
	};

	CASE() {
	    return this.getToken(CypherParser.CASE, 0);
	};

	WHEN() {
	    return this.getToken(CypherParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(CypherParser.THEN, 0);
	};

	ELSE() {
	    return this.getToken(CypherParser.ELSE, 0);
	};

	END() {
	    return this.getToken(CypherParser.END, 0);
	};

	MANDATORY() {
	    return this.getToken(CypherParser.MANDATORY, 0);
	};

	SCALAR() {
	    return this.getToken(CypherParser.SCALAR, 0);
	};

	OF() {
	    return this.getToken(CypherParser.OF, 0);
	};

	ADD() {
	    return this.getToken(CypherParser.ADD, 0);
	};

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.enterReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherParserListener ) {
	        listener.exitReservedWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CypherParserVisitor ) {
	        return visitor.visitReservedWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




CypherParser.ScriptContext = ScriptContext; 
CypherParser.QueryContext = QueryContext; 
CypherParser.RegularQueryContext = RegularQueryContext; 
CypherParser.SingleQueryContext = SingleQueryContext; 
CypherParser.StandaloneCallContext = StandaloneCallContext; 
CypherParser.ReturnStContext = ReturnStContext; 
CypherParser.WithStContext = WithStContext; 
CypherParser.SkipStContext = SkipStContext; 
CypherParser.LimitStContext = LimitStContext; 
CypherParser.ProjectionBodyContext = ProjectionBodyContext; 
CypherParser.ProjectionItemsContext = ProjectionItemsContext; 
CypherParser.ProjectionItemContext = ProjectionItemContext; 
CypherParser.OrderItemContext = OrderItemContext; 
CypherParser.OrderStContext = OrderStContext; 
CypherParser.SinglePartQContext = SinglePartQContext; 
CypherParser.MultiPartQContext = MultiPartQContext; 
CypherParser.MatchStContext = MatchStContext; 
CypherParser.UnwindStContext = UnwindStContext; 
CypherParser.ReadingStatementContext = ReadingStatementContext; 
CypherParser.UpdatingStatementContext = UpdatingStatementContext; 
CypherParser.DeleteStContext = DeleteStContext; 
CypherParser.RemoveStContext = RemoveStContext; 
CypherParser.RemoveItemContext = RemoveItemContext; 
CypherParser.QueryCallStContext = QueryCallStContext; 
CypherParser.ParenExpressionChainContext = ParenExpressionChainContext; 
CypherParser.YieldItemsContext = YieldItemsContext; 
CypherParser.YieldItemContext = YieldItemContext; 
CypherParser.MergeStContext = MergeStContext; 
CypherParser.MergeActionContext = MergeActionContext; 
CypherParser.SetStContext = SetStContext; 
CypherParser.SetItemContext = SetItemContext; 
CypherParser.NodeLabelsContext = NodeLabelsContext; 
CypherParser.CreateStContext = CreateStContext; 
CypherParser.PatternWhereContext = PatternWhereContext; 
CypherParser.WhereContext = WhereContext; 
CypherParser.PatternContext = PatternContext; 
CypherParser.ExpressionContext = ExpressionContext; 
CypherParser.XorExpressionContext = XorExpressionContext; 
CypherParser.AndExpressionContext = AndExpressionContext; 
CypherParser.NotExpressionContext = NotExpressionContext; 
CypherParser.ComparisonExpressionContext = ComparisonExpressionContext; 
CypherParser.ComparisonSignsContext = ComparisonSignsContext; 
CypherParser.AddSubExpressionContext = AddSubExpressionContext; 
CypherParser.MultDivExpressionContext = MultDivExpressionContext; 
CypherParser.PowerExpressionContext = PowerExpressionContext; 
CypherParser.UnaryAddSubExpressionContext = UnaryAddSubExpressionContext; 
CypherParser.AtomicExpressionContext = AtomicExpressionContext; 
CypherParser.ListExpressionContext = ListExpressionContext; 
CypherParser.StringExpressionContext = StringExpressionContext; 
CypherParser.StringExpPrefixContext = StringExpPrefixContext; 
CypherParser.NullExpressionContext = NullExpressionContext; 
CypherParser.PropertyOrLabelExpressionContext = PropertyOrLabelExpressionContext; 
CypherParser.PropertyExpressionContext = PropertyExpressionContext; 
CypherParser.PatternPartContext = PatternPartContext; 
CypherParser.PatternElemContext = PatternElemContext; 
CypherParser.PatternElemChainContext = PatternElemChainContext; 
CypherParser.PropertiesContext = PropertiesContext; 
CypherParser.NodePatternContext = NodePatternContext; 
CypherParser.AtomContext = AtomContext; 
CypherParser.LhsContext = LhsContext; 
CypherParser.RelationshipPatternContext = RelationshipPatternContext; 
CypherParser.RelationDetailContext = RelationDetailContext; 
CypherParser.RelationshipTypesContext = RelationshipTypesContext; 
CypherParser.UnionStContext = UnionStContext; 
CypherParser.SubqueryExistContext = SubqueryExistContext; 
CypherParser.InvocationNameContext = InvocationNameContext; 
CypherParser.FunctionInvocationContext = FunctionInvocationContext; 
CypherParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext; 
CypherParser.FilterWithContext = FilterWithContext; 
CypherParser.PatternComprehensionContext = PatternComprehensionContext; 
CypherParser.RelationshipsChainPatternContext = RelationshipsChainPatternContext; 
CypherParser.ListComprehensionContext = ListComprehensionContext; 
CypherParser.FilterExpressionContext = FilterExpressionContext; 
CypherParser.CountAllContext = CountAllContext; 
CypherParser.ExpressionChainContext = ExpressionChainContext; 
CypherParser.CaseExpressionContext = CaseExpressionContext; 
CypherParser.ParameterContext = ParameterContext; 
CypherParser.LiteralContext = LiteralContext; 
CypherParser.RangeLitContext = RangeLitContext; 
CypherParser.BoolLitContext = BoolLitContext; 
CypherParser.NumLitContext = NumLitContext; 
CypherParser.StringLitContext = StringLitContext; 
CypherParser.CharLitContext = CharLitContext; 
CypherParser.ListLitContext = ListLitContext; 
CypherParser.MapLitContext = MapLitContext; 
CypherParser.MapPairContext = MapPairContext; 
CypherParser.NameContext = NameContext; 
CypherParser.SymbolContext = SymbolContext; 
CypherParser.ReservedWordContext = ReservedWordContext; 
